[
  {
    "articleId": 105148032,
    "title": "领域驱动设计实战：构建高效的在线请假考勤系统",
    "description": "领域驱动设计DDD是一种设计思想，它可以同时指导中台业务建模和微服务设计(中台本质是业务模型，微服务是业务模型的系统落地)，领域驱动设计强调领域模型和微服务设计的一体性，先有领域模型然后才有微服务，而不是脱离领域模型来谈微服务设计。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105148032",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1661746,
    "commentCount": 1263,
    "editUrl": "https://mp.csdn.net/console/editor/html/105148032",
    "postTime": "2020-03-27 19:04:30",
    "diggCount": 152,
    "formatTime": "2020.03.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/cba6cd17b4fecfb73ac192e31c9e592f.png"
    ],
    "collectCount": 180,
    "tags": [
      "设计规范",
      "软件构建",
      "性能优化",
      "敏捷流程",
      "软件工程"
    ]
  },
  {
    "articleId": 105124900,
    "title": "微服务与领域驱动设计：构建高内聚低耦合系统的指南",
    "description": "领域驱动设计DDD是一种设计思想，它可以同时指导中台业务建模和微服务设计(中台本质是业务模型，微服务是业务模型的系统落地)，领域驱动设计强调领域模型和微服务设计的一体性，先有领域模型然后才有微服务，而不是脱离领域模型来谈微服务设计。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105124900",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1728509,
    "commentCount": 871,
    "editUrl": "https://mp.csdn.net/console/editor/html/105124900",
    "postTime": "2020-03-26 18:34:46",
    "diggCount": 156,
    "formatTime": "2020.03.26",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/39f644832376e672c2cea704b52c6a37.png"
    ],
    "collectCount": 493,
    "tags": [
      "架构",
      "后端",
      "软件构建",
      "软件工程",
      "需求分析"
    ]
  },
  {
    "articleId": 105078547,
    "title": "驾驭复杂性：领域驱动设计的核心理论分析",
    "description": "领域驱动实践基本理论总结与分析",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105078547",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1657414,
    "commentCount": 1978,
    "editUrl": "https://mp.csdn.net/console/editor/html/105078547",
    "postTime": "2020-03-24 19:03:13",
    "diggCount": 100,
    "formatTime": "2020.03.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/67732f45b79a49c25b9b3cc482e9ff3d.png"
    ],
    "collectCount": 188,
    "tags": [
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 87272559,
    "title": "深入解析Spring Cloud Config：多样配置中心的实现与高可用策略",
    "description": "这篇文章探讨了配置中心的重要性及其在分布式系统中的应用，特别关注Spring Cloud Config。文章首先介绍了配置中心的由来、功能及选择标准，然后详细阐述了Spring Cloud Config的基本实现方法，包括结合Git、关系型数据库（MySQL）和非关系型数据库（MongoDB）的方案。此外，还讨论了配置中心的高可用性、客户端自动刷新机制及安全认证等扩展功能。最后，文章对比了Spring Cloud Config与Apollo的特性，强调Apollo在企业级应用中的优势。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87272559",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1645796,
    "commentCount": 1619,
    "editUrl": "https://mp.csdn.net/console/editor/html/87272559",
    "postTime": "2019-02-14 14:36:20",
    "diggCount": 60,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/2a184e58bb44a0f26ce5f1481bc44bf3.png"
    ],
    "collectCount": 110,
    "tags": [
      "微服务",
      "架构",
      "java"
    ]
  },
  {
    "articleId": 87272495,
    "title": "全面解读Spring Cloud Zuul：从配置到优化的实战指南",
    "description": "在微服务架构中，API网关作为核心组件之一，承担着请求路由、负载均衡、安全认证等重要功能。Spring Cloud Zuul作为一款功能强大的API网关解决方案，得到了广泛应用。本文将深入探讨Spring Cloud Zuul的各项功能，从基础配置到工作原理，再到多层负载和应用优化，全面解析其在实际应用中的最佳实践与实用技巧，为开发者提供一站式指导，助力其打造高性能、高可用的微服务架构。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87272495",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1649792,
    "commentCount": 935,
    "editUrl": "https://mp.csdn.net/console/editor/html/87272495",
    "postTime": "2019-02-14 14:35:42",
    "diggCount": 88,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c9c663ab78c33d226fde460148189da6.png"
    ],
    "collectCount": 168,
    "tags": [
      "架构",
      "微服务",
      "spring cloud"
    ]
  },
  {
    "articleId": 87272248,
    "title": "深入理解Spring Cloud Feign与Ribbon：优雅的微服务调用解决方案",
    "description": "在现代的分布式系统中，微服务架构已经成为了构建大型应用的主流方式。而在微服务架构中，服务间的通信尤为重要，直接影响到系统的稳定性和性能。Spring Cloud作为领先的微服务解决方案，提供了Feign和Ribbon这两个强大的工具，用于简化和优化服务间的调用和负载均衡。本文将探讨Spring Cloud Feign和Ribbon的工作原理及其在实际应用中的最佳实践，帮助开发者更好地理解和利用这些工具来构建可靠的微服务系统。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87272248",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1645540,
    "commentCount": 1058,
    "editUrl": "https://mp.csdn.net/console/editor/html/87272248",
    "postTime": "2019-02-14 14:32:18",
    "diggCount": 75,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7cad480712f198bea1ddf5a09b635633.png"
    ],
    "collectCount": 204,
    "tags": [
      "spring cloud",
      "微服务",
      "架构"
    ]
  },
  {
    "articleId": 87271881,
    "title": "深入理解服务发现与注册：从单体架构到微服务时代的演进",
    "description": "本文首先回顾了服务发现与注册技术在不同系统架构时代的应用演进，分析了单体架构、SOA架构和现代微服务架构下的实现方式和挑战。随后，文章详细介绍了服务发现与注册的技术选型，并深入探讨了Eureka作为一种基于AP原则的服务注册中心的设计理念，包括其如何解决服务实例注册、剔除和信息一致性问题。接着，本文分析了Eureka的基本架构和细化结构，包括注册中心服务器、服务提供者和消费者的角色和功能。最后，文章讨论了Eureka的高可用方案、区域亲和性以及参数调优与监控策略，帮助读者更好地理解和应用这一关键技术组件来构",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87271881",
    "type": 1,
    "top": true,
    "forcePlan": false,
    "viewCount": 1647127,
    "commentCount": 882,
    "editUrl": "https://mp.csdn.net/console/editor/html/87271881",
    "postTime": "2019-02-14 14:28:33",
    "diggCount": 56,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/df8418bbb56dfaf2fb806e62d08d573c.png"
    ],
    "collectCount": 105,
    "tags": [
      "eureka",
      "spring cloud",
      "微服务"
    ]
  },
  {
    "articleId": 132390106,
    "title": "快速学习GO语言总结",
    "description": "针对有一定计算机语言基础人员快速掌握go语言，直接快速开始学习之旅",
    "url": "https://zyfcodes.blog.csdn.net/article/details/132390106",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 28378,
    "commentCount": 540,
    "editUrl": "https://mp.csdn.net/console/editor/html/132390106",
    "postTime": "2024-12-04 12:23:04",
    "diggCount": 104,
    "formatTime": "2024.12.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d4979c1b07405898af2e07baaab9878f.png"
    ],
    "collectCount": 119,
    "tags": [
      "go"
    ]
  },
  {
    "articleId": 130191645,
    "title": "微信红包系统整体架构分析探讨",
    "description": "微信红包系统的设计与实施展示了面对高并发和大数据处理挑战时的技术创新和架构优化。系统通过模块化设计，从接入层到业务逻辑层再到数据存储层，确保了高效性和稳定性。采用了单元化架构和分库分表策略来应对并发请求，同时通过 Redis 缓存和异步处理机制优化性能。红包分配算法如实时拆分和二倍均值法，提升了用户体验并确保了公平性。为了提高系统可用性和容灾能力，实施了微服务架构、无状态设计和冗余部署。微信红包系统不仅解决了技术挑战，还提供了流畅的用户体验，是现代分布式系统设计的成功案例。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130191645",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23393,
    "commentCount": 1202,
    "editUrl": "https://mp.csdn.net/console/editor/html/130191645",
    "postTime": "2024-12-04 12:22:43",
    "diggCount": 89,
    "formatTime": "2024.12.04",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/662d2d1cf09c49fcae54a5f078c38d51.png"
    ],
    "collectCount": 55,
    "tags": [
      "微信",
      "微信开放平台",
      "架构",
      "后端",
      "分布式",
      "中间件",
      "软件工程"
    ]
  },
  {
    "articleId": 139639510,
    "title": "从ES的JVM配置起步思考JVM常见参数优化",
    "description": "Java 8目前仍然是许多企业中主要使用的版本之一，尤其是对于比较保守的公司。在过去，CMS (Concurrent Mark-Sweep) 垃圾回收器在Java 8中是一种常见选择，因为它在某些场景下能够提供较好的性能。然而，随着Java版本的不断更新，一些旧的特性和组件被淘汰或替代，比如CMS。Java 14中正式废弃了CMS，而新的垃圾回收器，如ZGC和G1，逐渐成为了主流选择。ZGC和G1在处理大内存堆和低停顿时间方面表现出色，适用于现代应用程序的需求。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139639510",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 40536,
    "commentCount": 475,
    "editUrl": "https://mp.csdn.net/console/editor/html/139639510",
    "postTime": "2024-12-03 09:18:03",
    "diggCount": 108,
    "formatTime": "2024.12.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/22472748aa7235cb6590257652b7672f.png"
    ],
    "collectCount": 90,
    "tags": [
      "elasticsearch",
      "jvm",
      "大数据"
    ]
  },
  {
    "articleId": 130191649,
    "title": "提升分布式系统响应速度：分布式系统远程调用性能提升之道",
    "description": "本文主要探讨了在高并发和复杂数据需求的分布式系统中，如何通过并行调用、数据异构存储和混合策略优化接口性能。通过分析多个服务接口调用的实际场景，文章介绍了如何利用并发工具（如 Java 的 CompletableFuture）实现并行调用，缩短响应时间；以及如何通过 Redis 等缓存技术进行数据异构存储，减少远程调用次数。最后，文章总结了混合策略的应用，通过动态选择并行调用和缓存策略，既满足了数据实时性要求，又优化了系统的性能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130191649",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22824,
    "commentCount": 416,
    "editUrl": "https://mp.csdn.net/console/editor/html/130191649",
    "postTime": "2024-12-02 09:17:42",
    "diggCount": 48,
    "formatTime": "2024.12.02",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/1b97d79b1129463fadee53bb6605109c.png"
    ],
    "collectCount": 33,
    "tags": [
      "性能优化",
      "后端",
      "分布式",
      "架构"
    ]
  },
  {
    "articleId": 139702063,
    "title": "智能化业务校验框架：动态设计与应用实践",
    "description": "实现一套业务层级的动态校验框架。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139702063",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 32238,
    "commentCount": 437,
    "editUrl": "https://mp.csdn.net/console/editor/html/139702063",
    "postTime": "2024-12-01 23:56:03",
    "diggCount": 45,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d79607f3479b0f41385c2dd0da33e392.png"
    ],
    "collectCount": 32,
    "tags": [
      "java",
      "大数据",
      "架构",
      "系统架构"
    ]
  },
  {
    "articleId": 106079903,
    "title": "异步处理优化：多线程线程池与消息队列的选择与应用",
    "description": "本文讨论了两种常见的异步处理方式：多线程线程池和消息队列（MQ）。通过将非核心逻辑异步化，可以提升系统的性能和响应速度。多线程线程池适用于本地并发任务，适合需要快速响应的场景，但无法处理跨服务任务。消息队列则适用于分布式系统，能够解耦服务并保证任务的可靠性和顺序性，适合处理高并发和高可靠性要求的任务。文章提供了实际代码示例，帮助开发者根据业务需求选择合适的异步处理方式。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106079903",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1664280,
    "commentCount": 458,
    "editUrl": "https://mp.csdn.net/console/editor/html/106079903",
    "postTime": "2024-12-01 23:55:34",
    "diggCount": 57,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/12c18d0b34f747ee9e780832090c2403.png"
    ],
    "collectCount": 53,
    "tags": [
      "后端",
      "分布式",
      "java",
      "kafka"
    ]
  },
  {
    "articleId": 140415504,
    "title": "分布式系统中的Dapper与Twitter Zipkin：链路追踪技术的实现与应用",
    "description": "本文深入探讨了Dapper和Zipkin作为分布式系统中关键的链路追踪工具的演进与应用。Dapper作为Google的开创性作品，通过精确的时间戳和分布式日志记录，革新了对分布式系统性能问题的诊断能力。而Zipkin则以其开放性和社区驱动的特性，成为了广泛采用的开源解决方案，支持多语言、多协议的链路追踪需求。文章详细分析了它们在微服务架构中的实际应用，包括如何通过追踪和监控分布式调用路径，提升系统的可观察性和性能优化的能力。最后，通过案例研究和技术评估，展示了如何利用这些工具解决复杂的分布式系统问题，为开发",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140415504",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 18543,
    "commentCount": 1010,
    "editUrl": "https://mp.csdn.net/console/editor/html/140415504",
    "postTime": "2024-12-01 23:55:20",
    "diggCount": 149,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/41a207561c3747f5b638634f7955d53d.png"
    ],
    "collectCount": 78,
    "tags": [
      "分布式",
      "系统架构",
      "架构",
      "后端",
      "中间件",
      "logback"
    ]
  },
  {
    "articleId": 134222464,
    "title": "揭开广告引擎的神秘面纱：如何在0.1秒内精准匹配用户需求？",
    "description": "学习广告引擎的整体架构和工作过程是本文的关键内容，包括广告请求解析、标签检索、向量检索、打分排序等多个关键环节。这些环节共同构建了一个强大的广告引擎，使其能够在极短的时间内返回最相关的广告。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134222464",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55195,
    "commentCount": 513,
    "editUrl": "https://mp.csdn.net/console/editor/html/134222464",
    "postTime": "2024-12-01 23:55:04",
    "diggCount": 108,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/3f30d25057428a0a331e69bc381d623b.png"
    ],
    "collectCount": 63,
    "tags": [
      "系统架构",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 139702132,
    "title": "智能化状态管理：自动状态流转处理模块",
    "description": "自动流转一般都是一个很大的处理系统，其中包含的处理内容是很庞大的，就这样一个大型系统的开发思路，我后面会抽空来分享一篇全局的思路，本次仅针对一般如果我们需要对一些业务流程需要进行自动化处理思维的给出一个样例的自动状态流转处理模块的代码示例。如果有写的不对的地方，请留言指正！",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139702132",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 32060,
    "commentCount": 514,
    "editUrl": "https://mp.csdn.net/console/editor/html/139702132",
    "postTime": "2024-12-01 23:54:51",
    "diggCount": 49,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0645ebfe31b0ba55ec44073fa386833b.png"
    ],
    "collectCount": 39,
    "tags": [
      "java",
      "服务器",
      "架构",
      "软件工程",
      "系统架构"
    ]
  },
  {
    "articleId": 138403861,
    "title": "EMall实践DDD模拟电商系统总结",
    "description": "学习如何利用领域驱动设计（DDD）构建电商系统。从事件风暴开始，团队快速梳理业务流程和事件。系统用例和领域上下文分析系统需求和边界。探讨架构设计，融合六边形架构和系统分层。系统实现包括项目结构、订单功能、领域层实现和Repository层实现。重点介绍聚合、CQRS模式、缓存、Unit Of Work模式等概念。最后，讨论领域事件实现，帮助了解电商系统设计和实现，掌握DDD在电商系统中的应用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138403861",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 34750,
    "commentCount": 970,
    "editUrl": "https://mp.csdn.net/console/editor/html/138403861",
    "postTime": "2024-12-01 23:54:40",
    "diggCount": 75,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e24c81784e707e133d91fdacb937fed8.png"
    ],
    "collectCount": 36,
    "tags": [
      "系统架构",
      "驱动开发"
    ]
  },
  {
    "articleId": 139639556,
    "title": "DDD领域应用理论实践分析回顾",
    "description": "探讨领域驱动设计（DDD）在现代软件开发中的重要性，以复杂的B端营销系统为例看实际应用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139639556",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 32383,
    "commentCount": 470,
    "editUrl": "https://mp.csdn.net/console/editor/html/139639556",
    "postTime": "2024-12-01 23:54:24",
    "diggCount": 54,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/193b6117ddbb274776b62e29dcdc4e49.png"
    ],
    "collectCount": 37,
    "tags": [
      "分布式",
      "软件工程",
      "系统架构",
      "架构"
    ]
  },
  {
    "articleId": 105413134,
    "title": "接口性能优化宝典：解决性能瓶颈的策略与实践",
    "description": "本文深入探讨了提升接口性能的多种策略，涵盖了数据库优化、远程调用、异步处理、事务优化、缓存机制、分库分表等方面的技术。通过直面常见性能瓶颈，本文详细讲解了如何优化 SQL 执行效率、避免重复调用、减少事务复杂性、提高并发度，并提供了实际应用的最佳实践和技术方案。此外，文章还结合具体的案例，阐述了如何通过合理选择和设计优化方案，解决常见的性能问题，帮助开发者构建高效、可扩展的系统架构。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105413134",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1707503,
    "commentCount": 491,
    "editUrl": "https://mp.csdn.net/console/editor/html/105413134",
    "postTime": "2024-12-01 23:54:11",
    "diggCount": 92,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/516889d036cc4384932e5ef344e12254.png"
    ],
    "collectCount": 316,
    "tags": [
      "分布式",
      "后端",
      "redis",
      "性能优化",
      "算法",
      "架构",
      "java"
    ]
  },
  {
    "articleId": 139611703,
    "title": "Java 同步锁性能的最佳实践：从理论到实践的完整指南",
    "description": "在多线程编程中，锁是保证线程安全的重要手段之一，但如何选择合适的锁并进行优化，一直是我们面临的挑战。本博客探讨Java中同步锁的性能分析与优化之路，从使用同步锁和不使用同步锁的性能对比入手，逐步展开对锁的优化手段和技术原理的解析，帮助读者更好地理解和应用Java中的锁机制。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139611703",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 39752,
    "commentCount": 418,
    "editUrl": "https://mp.csdn.net/console/editor/html/139611703",
    "postTime": "2024-12-01 23:53:54",
    "diggCount": 92,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e382a9851a45599a4d522a125eba2012.png"
    ],
    "collectCount": 60,
    "tags": [
      "java",
      "开发语言",
      "jvm"
    ]
  },
  {
    "articleId": 139667074,
    "title": "实战指南：理解 ThreadLocal 原理并用于Java 多线程上下文管理",
    "description": "探讨如何基于实现一个高效的上下文管理组件，以解决多线程环境下的数据共享和上下文管理这些问题。通过具体的代码示例和实战展示如何为多线程编程提供一种简洁而高效的上下文管理方案。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139667074",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 51081,
    "commentCount": 585,
    "editUrl": "https://mp.csdn.net/console/editor/html/139667074",
    "postTime": "2024-12-01 23:53:39",
    "diggCount": 114,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8925bcd8fdc2c95e4d4fc848883c3c72.png"
    ],
    "collectCount": 136,
    "tags": [
      "java",
      "开发语言"
    ]
  },
  {
    "articleId": 140088827,
    "title": "高并发场景下的热点key问题探析与应对策略",
    "description": "当今高并发场景下，热点key问题成为影响系统性能和稳定性的关键挑战。本文探讨了热点key问题的定义及其在分布式系统中的常见表现，如流量集中、缓存分片打垮等。针对这些问题，本文提出了多级缓存策略、多副本策略和热点key拆分与动态分散策略作为有效应对措施。这些策略不仅能显著减轻单点负载压力，还能提升系统的并发处理能力和整体稳定性，从而保障系统在高负载和复杂业务场景下的可靠性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140088827",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 33899,
    "commentCount": 766,
    "editUrl": "https://mp.csdn.net/console/editor/html/140088827",
    "postTime": "2024-12-01 23:53:26",
    "diggCount": 94,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/ef486ff18aa934576d4039ebe5e3dc93.png"
    ],
    "collectCount": 41,
    "tags": [
      "redis",
      "分布式",
      "缓存"
    ]
  },
  {
    "articleId": 139611610,
    "title": "缓冲区的奥秘：解析数据交错的魔法",
    "description": "本文探讨了缓冲区的重要性及其在不同领域的应用。首先，从直观角度解释了缓冲区的好处，包括保持操作节奏、减少性能损耗和优化用户体验等。其次，通过经典案例分析了文件读写流和日志缓冲的应用，展示了缓冲区的加速效果。进一步探讨了缓冲区优化方向，以及在Kafka中可能引发的数据丢失和对业务高可用性的影响。本文旨在帮助读者深入理解缓冲区的奥秘，以及在实际应用中的优化思路。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139611610",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 34020,
    "commentCount": 509,
    "editUrl": "https://mp.csdn.net/console/editor/html/139611610",
    "postTime": "2024-12-01 23:53:05",
    "diggCount": 35,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8284085f3e9c101f9ad2f41f272c5bee.png"
    ],
    "collectCount": 30,
    "tags": [
      "缓存",
      "系统架构",
      "软件工程"
    ]
  },
  {
    "articleId": 133500057,
    "title": "预训练模型与ChatGPT：自然语言处理的革新与前景",
    "description": "主要涵盖了ChatGPT的背景、NLP学习范式的演进、预训练方法的详细介绍以及OpenAI的GPT系列模型的概述。旨在提供一个全面的认知和理解，以帮助读者更好地了解ChatGPT以及与之相关的NLP领域的发展。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133500057",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20729,
    "commentCount": 764,
    "editUrl": "https://mp.csdn.net/console/editor/html/133500057",
    "postTime": "2024-12-01 23:52:52",
    "diggCount": 58,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/ca57012988154afc42fd92b5c723ee8b.png"
    ],
    "collectCount": 59,
    "tags": [
      "chatgpt",
      "知识图谱",
      "机器翻译",
      "transformer",
      "gpt-3",
      "文心一言",
      "nlp"
    ]
  },
  {
    "articleId": 139584623,
    "title": "直击高频编程考点：聚焦新版综合编程能力考查汇总",
    "description": "业务性编程能力指的是开发人员在理解和实现具体业务需求方面的能力。这不仅包括对编程语言、框架和工具的熟练掌握，还涉及对业务逻辑、流程和领域知识的深入理解和灵活运用。在编程结束后或过程中需要扩展分析考查面试者的知识广度。本文总结常考的几类大题分享来说明具体的内容",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139584623",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 33515,
    "commentCount": 493,
    "editUrl": "https://mp.csdn.net/console/editor/html/139584623",
    "postTime": "2024-12-01 23:52:34",
    "diggCount": 53,
    "formatTime": "2024.12.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/23e3d13640172cc78e95abe48ec7e2e6.png"
    ],
    "collectCount": 32,
    "tags": [
      "面试",
      "职场和发展"
    ]
  },
  {
    "articleId": 139568339,
    "title": "核心社群营销和覆盖区域选型",
    "description": "社群营销是一种通过精细化运营和长期用户关系维护，实现企业营销目标的新型营销模式。通过选择合适的平台，建立并管理高价值的社群，企业可以实现拉新、促活和转化等多个目标，为产品的推广和用户关系的维护提供有力支持。在这个过程中，企业微信因其强大的功能和完善的生态系统，成为企业进行社群营销的理想平台。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139568339",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 31909,
    "commentCount": 958,
    "editUrl": "https://mp.csdn.net/console/editor/html/139568339",
    "postTime": "2024-11-20 00:04:40",
    "diggCount": 45,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/20f510a9f17840a9ee7bee57e2ea3c11.png"
    ],
    "collectCount": 36,
    "tags": [
      "大数据",
      "人工智能"
    ]
  },
  {
    "articleId": 139568355,
    "title": "探究IOC容器刷新环节初始化前的预处理",
    "description": "本文深入探讨了Spring IOC容器刷新前的关键步骤。我们从快速回顾IOC容器刷新环节开始，引出初始化前的预处理 prepareRefresh 方法的源码分析。随后，我们着重研究了初始化属性源的过程，分别探讨了 GenericWebApplicationContext 和 StaticWebApplicationContext 中的属性源初始化方法。最后，我们深入探讨了初始化早期事件集合的重要性。通过本文的阐述，读者将全面了解IOC容器刷新前的幕后操作，进一步加深对Spring框架核心机制的理解。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139568355",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 31821,
    "commentCount": 479,
    "editUrl": "https://mp.csdn.net/console/editor/html/139568355",
    "postTime": "2024-11-20 00:04:26",
    "diggCount": 45,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9580d634ccbbe7fb8cd59b0b6748f124.png"
    ],
    "collectCount": 43,
    "tags": [
      "java",
      "spring boot",
      "开发语言"
    ]
  },
  {
    "articleId": 139667021,
    "title": "聚焦IOC容器刷新环节obtainFreshBeanFactory初始化BeanFactory专项",
    "description": "探讨BeanFactory的刷新机制，从最基本的IOC容器刷新环节出发，逐步分析了其具体实现。主要介绍BeanFactory的刷新过程，然后通过源码分析了在注解驱动和XML配置方式下如何创建和初始化BeanFactory。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139667021",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 31808,
    "commentCount": 478,
    "editUrl": "https://mp.csdn.net/console/editor/html/139667021",
    "postTime": "2024-11-20 00:02:23",
    "diggCount": 45,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1da194d1b5b19583d531bdbe247dd8f8.png"
    ],
    "collectCount": 43,
    "tags": [
      "java",
      "spring boot",
      "开发语言"
    ]
  },
  {
    "articleId": 139756774,
    "title": "解放代码：识别与消除循环依赖的实战指南",
    "description": "本文讨论软件开发中常见的循环依赖问题及其解决方法。首先介绍了循环依赖在代码中的形成原因，并提出了避免循环依赖的基本原则。其次，详细介绍了使用工具如JDepend来识别项目中的循环依赖，并通过具体案例分析了三种消除循环依赖的方法：提取中介者、转移业务逻辑和采用回调接口。每种方法都结合了实际的代码改造示例和测试用例，帮助读者理解和应用这些技术以优化自己的软件架构和设计。主要思想的编排思路来自极客时间《如何有效识别和解决代码中存在的循环依赖问题？》，当然也有其他的参考和自身的一些思考和优化。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139756774",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 32669,
    "commentCount": 1295,
    "editUrl": "https://mp.csdn.net/console/editor/html/139756774",
    "postTime": "2024-11-20 00:01:38",
    "diggCount": 119,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9ff5456200b5ce8c07709617915beeb5.png"
    ],
    "collectCount": 40,
    "tags": [
      "服务器",
      "java",
      "spring"
    ]
  },
  {
    "articleId": 139909065,
    "title": "探究InnoDB Compact行格式背后",
    "description": "本次我们聚焦 InnoDB 行格式，理解它们是如何在幕后悄悄发挥作用的。行格式的设计反映了数据库设计者在权衡性能、存储和兼容性时的决策。到现在为止一共设计了4种不同类型的行格式 ，分别是 Compact 、 Redundant 、Dynamic 和 Compressed 行格式，随着时间的推移，他们可能会设计出更多的行格式，但是不管怎么变，在原理上大体都是相同的。我们本次主要针对Compact InnoDB 行格式进行分析理解。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139909065",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 32404,
    "commentCount": 471,
    "editUrl": "https://mp.csdn.net/console/editor/html/139909065",
    "postTime": "2024-11-20 00:01:23",
    "diggCount": 115,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b4c989e92d5642e2486ecf0a0b2a5ad9.jpeg"
    ],
    "collectCount": 22,
    "tags": [
      "oracle",
      "数据库"
    ]
  },
  {
    "articleId": 140451190,
    "title": "解读InnoDB数据库索引页与数据行的紧密关联",
    "description": "首先介绍了索引页结构的重要组成部分，包括文件头部、页面头部、最小和最大记录等。接着详细解释了数据页的双向链表结构和记录行的单向链表结构，揭示了它们在数据库中的作用和关系。特别关注了User Records在页面空间管理中的应用，包括页满前和页满后的处理策略。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140451190",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 36131,
    "commentCount": 471,
    "editUrl": "https://mp.csdn.net/console/editor/html/140451190",
    "postTime": "2024-11-20 00:00:57",
    "diggCount": 113,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b67e6fe16af3b9df88cfe9f9f67f46e2.png"
    ],
    "collectCount": 38,
    "tags": [
      "数据库",
      "oracle",
      "mysql",
      "sql",
      "postgresql"
    ]
  },
  {
    "articleId": 141116820,
    "title": "深入InnoDB核心：揭秘B+树在数据库索引中的高效应用",
    "description": "本文详细介绍了InnoDB存储引擎中B+树的结构和应用。首先，我们探讨了数据页和目录项记录的存储方式及其紧密关联。接着，解析了在未创建索引情况下的查找过程及其低效性，进而引出B+树索引方案。通过多级目录和高效节点管理，B+树实现了快速的数据查找和管理，通常不超过四层的树结构足以满足大部分应用需求。最后，总结了B+树在InnoDB中的重要性和优势，使得数据库系统在面对复杂查询时依然能够保持高效运作，为数据库性能提供了有力保障。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/141116820",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 26388,
    "commentCount": 966,
    "editUrl": "https://mp.csdn.net/console/editor/html/141116820",
    "postTime": "2024-11-20 00:00:45",
    "diggCount": 127,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/b5c5be4507d342baab1b2b3bd502d19d.png"
    ],
    "collectCount": 71,
    "tags": [
      "b树",
      "mysql",
      "sql",
      "数据结构",
      "odps"
    ]
  },
  {
    "articleId": 142446131,
    "title": "深入理解MySQL InnoDB中的B+索引机制",
    "description": "InnoDB中的索引是提高数据检索效率的关键。本文介绍了三种主要索引类型：聚簇索引：基于主键排序存储完整的用户记录，适合快速主键查询和范围查询。二级索引：基于非主键列排序，提升非主键查询性能，但需要回表操作。联合索引：基于多个列排序，适用于复杂查询，能够显著提升多列条件查询的效率。通过合理使用和配置这些索引，能有效提升数据库查询和数据操作的性能。理解索引的工作机制和最佳实践，对于优化MySQL数据库性能至关重要。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/142446131",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23465,
    "commentCount": 714,
    "editUrl": "https://mp.csdn.net/console/editor/html/142446131",
    "postTime": "2024-11-20 00:00:31",
    "diggCount": 72,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/484c553ce73b4ef0b2347ba2980693ae.png"
    ],
    "collectCount": 72,
    "tags": [
      "数据库",
      "mysql",
      "后端"
    ]
  },
  {
    "articleId": 140538842,
    "title": "优化JSON对象打印与数据处理的工具类：深入理解与应用",
    "description": "本文介绍了ObjectPrintOptimizer工具类的设计与实现，该工具类用于优化JSON数据打印，解决了冗余信息暴露和敏感数据泄露的问题。通过修改JSON对象的特定字段、替换过长字符串以及递归处理嵌套对象和数组，ObjectPrintOptimizer提高了数据处理的灵活性和安全性。本文详细分析了其核心功能和设计理念，旨在帮助开发者高效、安全地处理复杂数据结构，提升开发效率和代码质量。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140538842",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 16315,
    "commentCount": 317,
    "editUrl": "https://mp.csdn.net/console/editor/html/140538842",
    "postTime": "2024-11-20 00:00:16",
    "diggCount": 46,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/90c5e97c9fdc437cb15cb38e692137a0.png"
    ],
    "collectCount": 28,
    "tags": [
      "分布式",
      "后端",
      "算法",
      "json"
    ]
  },
  {
    "articleId": 140596544,
    "title": "聚焦IOC容器刷新环节prepareBeanFactory专项",
    "description": "在很早之前我们单独写过一篇文章《分析SpringBoot启动配置原理》，其中IOC容器的刷新环节可当重点分析，值得在读源码时进行深入分析，我们会从多个方向上再次进行分析回顾和学习。本次讲聚焦其中的prepareBeanFactory专项展开分析。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140596544",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 28497,
    "commentCount": 477,
    "editUrl": "https://mp.csdn.net/console/editor/html/140596544",
    "postTime": "2024-11-20 00:00:00",
    "diggCount": 111,
    "formatTime": "2024.11.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/4fbc5a1f80337a4377c6e21a32dc1d0b.png"
    ],
    "collectCount": 35,
    "tags": [
      "java",
      "spring boot",
      "spring",
      "后端",
      "开源",
      "spring cloud"
    ]
  },
  {
    "articleId": 140916579,
    "title": "聚焦IOC容器刷新环节postProcessBeanFactory（BeanFactory后置处理）专项",
    "description": "在很早之前我们单独写过一篇文章《分析SpringBoot启动配置原理》，具体可见：解析SpringBoot启动配置原理其中IOC容器的刷新环节可当重点分析，值得在读源码时进行深入分析，我们会从多个方向上再次进行分析回顾和学习。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140916579",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 31587,
    "commentCount": 622,
    "editUrl": "https://mp.csdn.net/console/editor/html/140916579",
    "postTime": "2024-11-19 23:59:48",
    "diggCount": 89,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/282e69e6c6a4443d92d533603ee19a5a.png"
    ],
    "collectCount": 43,
    "tags": [
      "java",
      "spring boot",
      "开发语言",
      "spring"
    ]
  },
  {
    "articleId": 86596036,
    "title": "探索CompletableFuture：高效异步编程的利器",
    "description": "随着现代软件系统的复杂性和用户需求的多样化，异步编程成为了提升系统性能和响应速度的重要手段。在Java领域，CompletableFuture作为Java 8引入的新特性，提供了强大的异步编程能力，极大地简化了多线程和并发任务的处理。本文将深入探讨CompletableFuture的基本功能和使用方法，介绍如何利用其提升程序的并发性能和代码的可维护性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86596036",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1664254,
    "commentCount": 450,
    "editUrl": "https://mp.csdn.net/console/editor/html/86596036",
    "postTime": "2024-11-19 23:59:35",
    "diggCount": 68,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9ffaf808dc2888e127d56e75a841492d.png"
    ],
    "collectCount": 84,
    "tags": [
      "java",
      "极限编程",
      "后端"
    ]
  },
  {
    "articleId": 130466437,
    "title": "CompletableFuture回调机制的设计与实现",
    "description": "CompletableFuture回调机制的设计与实现：首先分析Future原理总述与局限性，再次分析CompletableFuture原理与回调机制总结，最后从类图分析、整体流程分析和算法实现分析CompletableFuture回调机制设计，结尾给出简单的使用CompletableFuture注意方面",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130466437",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 24657,
    "commentCount": 513,
    "editUrl": "https://mp.csdn.net/console/editor/html/130466437",
    "postTime": "2024-11-19 23:59:14",
    "diggCount": 55,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/bf8f38e27b29b74970d9760b2c38db47.png"
    ],
    "collectCount": 65,
    "tags": [
      "java",
      "后端"
    ]
  },
  {
    "articleId": 140255023,
    "title": "互联网数字化商品管理浪潮思考：从信息化到精准运营",
    "description": "从技术角度来看，从运营百万商家到管理数十亿商品，平台必须依靠数据化手段进行商品管理。通过数据化重构人、货、场的关系，优化流量分配和精准营销，使数据成为连接商业环节的最佳语言，最终提升平台的整体流量价值和用户体验。通过这些策略的实施，电商平台能够实现从“商”到“品”的成功转型，更好地满足市场需求，提升竞争力。从过去以“运营商家”为核心的策略，逐步转变为以“运营商品”为导向的模式。这种转变要求我们重新定义运营重点，针对不同品类的特性，制定相应的优化策略。一、商品数字化转型面临的现状分析。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140255023",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 39192,
    "commentCount": 428,
    "editUrl": "https://mp.csdn.net/console/editor/html/140255023",
    "postTime": "2024-11-19 23:59:04",
    "diggCount": 121,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/58f22b830b45b95f14ee68963f9c542e.png"
    ],
    "collectCount": 46,
    "tags": [
      "大数据",
      "软件工程",
      "软件需求"
    ]
  },
  {
    "articleId": 141503823,
    "title": "LeetCode 面试经典 150 题回顾",
    "description": "最经典 150 题，掌握面试所有知识点面试经典 150 题 : 题目分析、解题思路、复杂度分析、代码展示",
    "url": "https://zyfcodes.blog.csdn.net/article/details/141503823",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21472,
    "commentCount": 521,
    "editUrl": "https://mp.csdn.net/console/editor/html/141503823",
    "postTime": "2024-11-19 23:58:49",
    "diggCount": 125,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/3d831fe18f8c4495978ba7d864b6b68c.png"
    ],
    "collectCount": 53,
    "tags": [
      "面试",
      "职场和发展"
    ]
  },
  {
    "articleId": 141401712,
    "title": "LeetCode 热题 100 回顾",
    "description": "力扣最受刷题发烧友欢迎的 100 道题LeetCode 热题 100 : 题目回顾、解题思路、复杂度分析、代码实现、验证算法",
    "url": "https://zyfcodes.blog.csdn.net/article/details/141401712",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 25243,
    "commentCount": 1056,
    "editUrl": "https://mp.csdn.net/console/editor/html/141401712",
    "postTime": "2024-11-19 23:58:32",
    "diggCount": 171,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/e02715f324ce4931bad7631d6a12bf08.png"
    ],
    "collectCount": 91,
    "tags": [
      "leetcode",
      "算法",
      "职场和发展"
    ]
  },
  {
    "articleId": 141469870,
    "title": "LeetCode 精选 75 回顾",
    "description": "LeetCode 75 面试必考精华版回顾练习: 重新审视题目，对其进行解题思路分析、算法复杂度分析、代码实现以及结果验证",
    "url": "https://zyfcodes.blog.csdn.net/article/details/141469870",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 19624,
    "commentCount": 520,
    "editUrl": "https://mp.csdn.net/console/editor/html/141469870",
    "postTime": "2024-11-19 23:58:17",
    "diggCount": 32,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/e5447710b9674e97b4d6a0434d304e41.png"
    ],
    "collectCount": 37,
    "tags": [
      "面试",
      "职场和发展"
    ]
  },
  {
    "articleId": 140759153,
    "title": "全面击破工程级复杂缓存难题",
    "description": "本文详细探讨了缓存技术在现代分布式系统中的应用与优化，涵盖本地缓存与分布式缓存的基本概念和实际应用。分析了旁路缓存模式、读写穿透模式和异步写缓存模式，并从强一致性和最终一致性两个角度提出解决方案。针对缓存穿透、缓存雪崩、缓存击穿和热点key问题，提出了多级缓存、多副本、热点key拆分等策略。最后，介绍了本地缓存+双缓存方案，通过主备缓存切换、数据总线重试机制和自动校对任务，确保系统高可用性和数据一致性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140759153",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 28690,
    "commentCount": 835,
    "editUrl": "https://mp.csdn.net/console/editor/html/140759153",
    "postTime": "2024-11-19 23:58:03",
    "diggCount": 137,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/bdd2fab3c937558e8403c5c78ee73e33.png"
    ],
    "collectCount": 58,
    "tags": [
      "spring",
      "后端",
      "缓存",
      "java"
    ]
  },
  {
    "articleId": 141375167,
    "title": "如何在分布式环境中实现高可靠性分布式锁",
    "description": "通过选择合适的分布式锁实现方式，可以有效提升系统的可靠性和一致性，确保业务逻辑的正确执行。在实际应用中，需要根据具体场景选择合适的实现方式，并进行适当的优化和调整，以应对分布式环境下的复杂挑战。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/141375167",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23291,
    "commentCount": 481,
    "editUrl": "https://mp.csdn.net/console/editor/html/141375167",
    "postTime": "2024-11-19 23:57:45",
    "diggCount": 130,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/6dac90ebb27e4f688c14b64e276a6b68.png"
    ],
    "collectCount": 49,
    "tags": [
      "分布式",
      "redis",
      "后端"
    ]
  },
  {
    "articleId": 136779677,
    "title": "为什么相关性不是因果关系？人工智能中的因果推理探秘",
    "description": "因果发现的目标是通过观测数据找出变量之间的因果关系，并用图模型来表示这些关系。这样的因果图能够最好地解释数据的生成过程，即在给定因果结构下生成观测数据的概率最大。因此，因果发现旨在寻找一个最佳的因果图模型，使其能够最好地解释观测数据并揭示变量之间的因果关系。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136779677",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 63791,
    "commentCount": 496,
    "editUrl": "https://mp.csdn.net/console/editor/html/136779677",
    "postTime": "2024-11-19 23:56:39",
    "diggCount": 117,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/2c9ca1435f83d2b37b894029757ae3c5.png"
    ],
    "collectCount": 59,
    "tags": [
      "学习",
      "ai",
      "AI编程",
      "AIGC"
    ]
  },
  {
    "articleId": 138402121,
    "title": "为何数据库推荐将IPv4地址存储为32位整数而非字符串？",
    "description": "探讨在Java开发中存储IPv4地址的最佳方式。通过对比字符串存储和整数存储两种方式的优缺点，我们发现整数存储方式在存储空间效率、查询效率和数学运算方面更具优势。虽然字符串存储方式更直观易读，但在处理大量数据时会浪费存储空间并降低查询效率。通过具体的示例代码演示了如何生成大量的IPv4地址数据，并将其插入到数据库表中。通过查询和索引效率的比较，我们验证了整数存储方式在性能方面的优势。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138402121",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 41192,
    "commentCount": 457,
    "editUrl": "https://mp.csdn.net/console/editor/html/138402121",
    "postTime": "2024-11-19 23:56:07",
    "diggCount": 64,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e069fbf2ad9f2d34773a29c4693ed52e.png"
    ],
    "collectCount": 40,
    "tags": [
      "服务器",
      "mysql",
      "数据库"
    ]
  },
  {
    "articleId": 140254995,
    "title": "投资策略规划最优决策分析",
    "description": "本文深入探讨了投资策略规划问题，从理论到实践，全面分析了如何在既定规则下最大化投资回报。我们首先通过状态转移方程和初始条件证明了最优投资策略，即每年将所有资金投入到单一投资产品中。接着，证明了规划最优投资策略问题具有最优子结构性质，并设计了最优投资策略规划算法，详细分析了其时间复杂度。最后，我们引入了新的投资限制条件，证明了在这种情况下，最大化10年回报问题不再具有最优子结构性质。通过这些分析，我们展示了理论优化策略与实际约束条件下的投资决策之间的差异，为投资者提供了宝贵的实践参考。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140254995",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 31365,
    "commentCount": 439,
    "editUrl": "https://mp.csdn.net/console/editor/html/140254995",
    "postTime": "2024-11-19 23:55:39",
    "diggCount": 29,
    "formatTime": "2024.11.19",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/13b768fa916f471aa1271e94f00925f5.png"
    ],
    "collectCount": 32,
    "tags": [
      "算法",
      "分布式",
      "金融"
    ]
  },
  {
    "articleId": 140089178,
    "title": "如何在面试中找到最优秀的候选人：雇佣问题的随机化算法探索",
    "description": "本文探讨了雇佣问题及其解决方案中的随机化算法应用。雇佣问题要求在一系列不可回溯的面试中找到最优秀的候选人，传统贪心策略存在局限性。随机化算法通过随机排列和预面试期的引入，有效地提高了找到最佳候选人的概率。通过数学推导和实际模拟，我们验证了随机化算法在这一问题中的有效性，为面试和招聘过程中决策的优化提供了新的思路和方法。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/140089178",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 31097,
    "commentCount": 448,
    "editUrl": "https://mp.csdn.net/console/editor/html/140089178",
    "postTime": "2024-07-01 01:38:33",
    "diggCount": 27,
    "formatTime": "2024.07.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c5668735f6e42b54a92acda26577fa04.png"
    ],
    "collectCount": 27,
    "tags": [
      "算法"
    ]
  },
  {
    "articleId": 139584588,
    "title": "探寻性能优化：如何衡量？如何决策？",
    "description": "性能优化，看似简单，实则复杂。就像选择一辆汽车一样，你想要的不仅仅是动力强劲，还要兼顾燃油经济性、操控稳定性等一系列指标。而在优化系统性能时，我们也需要综合考虑各种衡量指标，才能做出明智的决策。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/139584588",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 32755,
    "commentCount": 507,
    "editUrl": "https://mp.csdn.net/console/editor/html/139584588",
    "postTime": "2024-06-11 00:04:03",
    "diggCount": 43,
    "formatTime": "2024.06.11",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e32f6a62d34ddbcbfd513c08a73e7107.png"
    ],
    "collectCount": 34,
    "tags": [
      "性能优化",
      "后端"
    ]
  },
  {
    "articleId": 138392030,
    "title": "解救应用启动危机：Spring Boot的FailureAnalyzer机制",
    "description": "探讨Spring Boot中的FailureAnalyzer机制，帮助解决应用启动失败的难题。对FailureAnalyzer的工作原理、生效方式以及自定义的基本步骤进行介绍，包括注册方式说明和实例演示。希望可以帮助更好地理解并利用FailureAnalyzer来诊断和解决应用启动失败的问题。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138392030",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 36134,
    "commentCount": 621,
    "editUrl": "https://mp.csdn.net/console/editor/html/138392030",
    "postTime": "2024-05-02 22:15:02",
    "diggCount": 29,
    "formatTime": "2024.05.02",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/abf53a6333f5b4c99c466d1b84cbf8a5.png"
    ],
    "collectCount": 27,
    "tags": [
      "java",
      "spring boot",
      "开发语言"
    ]
  },
  {
    "articleId": 138389766,
    "title": "聚焦Spring后置处理器分析对比",
    "description": "Spring Framework 中的后置处理器允许在容器实例化 Bean 或者在 Bean 的生命周期中进行操作。从源码上来看的话，其实其扩展机制下的后置处理器其实很多。我们重点放到我们常用的几个上BeanPostProcessor、BeanFactoryPostProcessor来聚焦分析一下。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138389766",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 34287,
    "commentCount": 446,
    "editUrl": "https://mp.csdn.net/console/editor/html/138389766",
    "postTime": "2024-05-02 14:12:28",
    "diggCount": 37,
    "formatTime": "2024.05.02",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/801c52e664612816dba8ba4d6888b500.png"
    ],
    "collectCount": 34,
    "tags": [
      "spring",
      "java"
    ]
  },
  {
    "articleId": 138388372,
    "title": "重看Spring聚焦BeanDefinition分析和构造",
    "description": "BeanDefinition是Spring框架中重要的概念之一，它定义了Spring容器中Bean的元信息，是Spring实现依赖注入和控制反转的基础。我们本次来深入探讨BeanDefinition的概念与结构设计，并分析四种构造BeanDefinition的方式及其优缺点。帮助读者选择适合自己项目的构造方式，并为理解和应用BeanDefinition提供指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138388372",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 35249,
    "commentCount": 577,
    "editUrl": "https://mp.csdn.net/console/editor/html/138388372",
    "postTime": "2024-05-02 12:01:24",
    "diggCount": 38,
    "formatTime": "2024.05.02",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e16177fe9d9abf48df2d28207e870191.png"
    ],
    "collectCount": 28,
    "tags": [
      "spring",
      "java",
      "数据库"
    ]
  },
  {
    "articleId": 138202681,
    "title": "JDK 19 协程新特性：Project Loom 项目的延续",
    "description": "探讨了协程的定义、发展史和 JDK 19 中的实现原理。协程是一种轻量级的并发编程工具，通过 Continuation 控制流、Scheduler 调度和阻塞操作的改造，实现了非阻塞、高效的并发编程。历史回顾包括协程在不同编程语言中的应用和 Java 协程的发展。JDK 19 中的协程原理深入分析了创建协程的方法、非阻塞 IO 改造、Continuation 的作用以及协程的唤醒机制。总结了协程的核心原理和重要组件。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138202681",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 35981,
    "commentCount": 483,
    "editUrl": "https://mp.csdn.net/console/editor/html/138202681",
    "postTime": "2024-04-25 23:48:15",
    "diggCount": 31,
    "formatTime": "2024.04.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d135fb0df9fce89fd3cf2882b9593eff.png"
    ],
    "collectCount": 28,
    "tags": [
      "java",
      "jdk"
    ]
  },
  {
    "articleId": 138143503,
    "title": "用斐波那契数列感受算法的神奇（21亿耗时0.02毫秒）",
    "description": "用斐波那契数列感受算法的神奇（21亿耗时0.2毫秒）：在实际应用中，结合快速幂的矩阵解法确实是计算斐波那契数列的最优解之一，尤其是对于大数值的情况。然而，并不是所有情况下都适合使用这种方法。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138143503",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 37580,
    "commentCount": 530,
    "editUrl": "https://mp.csdn.net/console/editor/html/138143503",
    "postTime": "2024-04-25 01:14:51",
    "diggCount": 51,
    "formatTime": "2024.04.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a687f2a24cc0e7c521673947b94e52a5.png"
    ],
    "collectCount": 56,
    "tags": [
      "算法"
    ]
  },
  {
    "articleId": 138143445,
    "title": "业务通用校验能力的构建与应用：提升数据一致性与准确性",
    "description": "业务通用校验能力建设主要建设目标：将上层重复的校验能力抽取为校验模型，同时为模型提供配置化的管理能力，降低人力成本和研发成本；建立集中化的校验平台，提供多种校验模型的整合能力。标准化接入方式和处理能力，解决业务多场景变化和规则变化所带来的维护成本，同时有利于业务快速迭代；将业务数据校验功能进行解耦，建立校验规则场景化灵活处理，降低业务多场景和规则条件下的业务校验耦合能力，降低业务调用成本；建立校验能力规则化场景化联动功能，规则场景变化后快速提供能力给前后台赋能，提高业务灵活性",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138143445",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 35920,
    "commentCount": 422,
    "editUrl": "https://mp.csdn.net/console/editor/html/138143445",
    "postTime": "2024-04-24 04:03:09",
    "diggCount": 26,
    "formatTime": "2024.04.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/60564e9eec0dd68a75298939494c6e9b.png"
    ],
    "collectCount": 36,
    "tags": [
      "系统架构",
      "后端",
      "分布式",
      "java"
    ]
  },
  {
    "articleId": 138143106,
    "title": "重看Spring聚焦Environment分析",
    "description": "本文深入分析了Spring框架中Environment模块的设计与实现，详细讲解了Profiles、Properties的使用，及其与Spring IOC容器的关系。通过对源码的剖析，读者可以理解如何利用Environment来管理不同的应用环境配置，如开发、测试、生产环境等。此外，文章还探讨了PropertyResolver接口和ConfigurableEnvironment接口的功能及其在实际开发中的应用，帮助开发者在多环境配置中灵活应对，提高项目的可维护性与扩展性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138143106",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 37750,
    "commentCount": 473,
    "editUrl": "https://mp.csdn.net/console/editor/html/138143106",
    "postTime": "2024-04-24 03:54:06",
    "diggCount": 31,
    "formatTime": "2024.04.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/17e57a19ca754ff53cb95f235f16933e.png"
    ],
    "collectCount": 25,
    "tags": [
      "spring",
      "spring boot",
      "后端"
    ]
  },
  {
    "articleId": 138046927,
    "title": "简易分发器设计和开发（重点看代码设计）",
    "description": "设计分发平台的终极目标是为内容提供者和运营厂商提供全面的解决方案，帮助他们实现内容的高效管理和精准分发。通过灵活的配置和定制化功能，以及强大的数据分析和监控统计功能，平台能够帮助用户优化内容策略，提升内容传播的效果和用户体验，实现业务的持续增长和发展。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138046927",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 39239,
    "commentCount": 416,
    "editUrl": "https://mp.csdn.net/console/editor/html/138046927",
    "postTime": "2024-04-22 00:44:46",
    "diggCount": 49,
    "formatTime": "2024.04.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/71cc195583aef6d740760d6f0e87a5ce.png"
    ],
    "collectCount": 37,
    "tags": [
      "大数据",
      "后端",
      "分布式",
      "架构"
    ]
  },
  {
    "articleId": 138051035,
    "title": "全面解析检索技术：全景图与深度分析",
    "description": "本文通过全景图分析，系统探讨了检索技术的核心概念及其在信息时代的应用。首先，文章回顾了传统检索方法，如关键词检索和布尔检索的基本原理，强调了它们在信息获取中的重要性。随后，深入分析了语义检索、推荐系统和机器学习等先进技术，展示了它们如何通过理解用户意图和上下文，显著提升检索效果。此外，文章还探讨了检索技术在学术、商业和社交媒体等领域的广泛应用，指出了其在信息过载时代的关键作用。最后总结了未来检索技术的发展趋势，呼吁读者提升信息检索的意识与能力，以更有效地应对信息获取的挑战。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138051035",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 38882,
    "commentCount": 430,
    "editUrl": "https://mp.csdn.net/console/editor/html/138051035",
    "postTime": "2024-04-22 00:27:29",
    "diggCount": 30,
    "formatTime": "2024.04.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8789fe983598132b0b58df1d1b9c1762.png"
    ],
    "collectCount": 41,
    "tags": [
      "搜索引擎",
      "分布式",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 138007659,
    "title": "检索算法和技术的本质回顾",
    "description": "检索的核心思路，其实就是通过合理组织数据，尽可能地快速减少查询范围。也就是说到更多的检索算法和技术，其实它们的本质都是通过灵活应用各种数据结构的特点来组织数据，从而达到快速减少查询范围的目的。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138007659",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 41442,
    "commentCount": 458,
    "editUrl": "https://mp.csdn.net/console/editor/html/138007659",
    "postTime": "2024-04-20 18:58:37",
    "diggCount": 31,
    "formatTime": "2024.04.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e983e5a13df33a1203deefa24fff6086.png"
    ],
    "collectCount": 44,
    "tags": [
      "算法",
      "哈希算法"
    ]
  },
  {
    "articleId": 138006892,
    "title": "解锁ApplicationContext vs BeanFactory: 谁更具选择性？",
    "description": "解锁ApplicationContext vs BeanFactory: 谁更具选择性？如果你的应用程序需要更全面的功能，如事件发布、资源加载等，并且不太在意启动速度和资源占用，那么 ApplicationContext 是更好的选择。但是，如果你的应用程序对启动速度和资源占用有较高的要求，或者只需要基本的 IoC 容器功能，那么 BeanFactory 可能更适合你。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/138006892",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 42620,
    "commentCount": 432,
    "editUrl": "https://mp.csdn.net/console/editor/html/138006892",
    "postTime": "2024-04-20 18:32:57",
    "diggCount": 34,
    "formatTime": "2024.04.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7a6977eac66867850d18e6e3a84d43f1.png"
    ],
    "collectCount": 25,
    "tags": [
      "spring",
      "spring boot"
    ]
  },
  {
    "articleId": 137670813,
    "title": "重看Spring聚焦ApplicationContext分析",
    "description": "深入探讨Spring框架中的核心组件ApplicationContext，着重介绍了其根接口及其子接口，解析关键组件的源码，并通过简单应用举例进行了说明。接着，深入探讨了与ApplicationContext相关的几个父接口，分析了其与ApplicationContext的关系，并提供了简单的应用示例。最后，对几个ApplicationContext实现类进行了详细分析。希望能够更深入地理解Spring框架中的ApplicationContext，并能够更有效地应用于实际项目中。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/137670813",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 47287,
    "commentCount": 497,
    "editUrl": "https://mp.csdn.net/console/editor/html/137670813",
    "postTime": "2024-04-12 17:56:59",
    "diggCount": 29,
    "formatTime": "2024.04.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/2219badae1bb80ad153f74686c58c4c5.png"
    ],
    "collectCount": 27,
    "tags": [
      "spring",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 136970813,
    "title": "重看Spring聚焦BeanFactory分析",
    "description": "本文探讨了 Spring 框架中的 BeanFactory 接口及其实现，强调其在对象创建和依赖注入中的关键作用。通过分析 XmlBeanFactory、DefaultListableBeanFactory 和 AbstractApplicationContext 等不同实现，文章展示了它们在资源管理和对象生命周期控制中的应用。理解 BeanFactory 的工作原理有助于开发者构建高效、可扩展的 Java 应用，推动现代软件开发的创新。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136970813",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 48333,
    "commentCount": 500,
    "editUrl": "https://mp.csdn.net/console/editor/html/136970813",
    "postTime": "2024-03-24 14:23:51",
    "diggCount": 27,
    "formatTime": "2024.03.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5006ab7cd364f5da1f01d8e6ad0466f4.png"
    ],
    "collectCount": 42,
    "tags": [
      "spring",
      "spring boot"
    ]
  },
  {
    "articleId": 136285506,
    "title": "Amazon Aurora：面向高吞吐量云原生关系型数据库的设计考虑",
    "description": "理解《Amazon Aurora: 面向高吞吐量云原生关系型数据库的设计考虑》zooming对于亚马逊AWS的关系数据库服务Aurora的设计理念和架构。Aurora采用了分离计算和存储的方案，将事务和并发控制放在计算层，同时将Redo Log推送到可扩展存储的服务中。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136285506",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 52035,
    "commentCount": 419,
    "editUrl": "https://mp.csdn.net/console/editor/html/136285506",
    "postTime": "2024-03-06 23:38:07",
    "diggCount": 38,
    "formatTime": "2024.03.06",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/69bf4e6819f2a32cf8722f803282222c.png"
    ],
    "collectCount": 26,
    "tags": [
      "云原生",
      "数据库",
      "分布式",
      "后端",
      "架构",
      "中间件"
    ]
  },
  {
    "articleId": 136090309,
    "title": "思考数据建模与治理的完美结合",
    "description": "本文探讨了数据体系化建模的重要性及其在数据治理中的应用。数据建模作为一项系统性工程，能够有效整合和组织数据，以满足企业的需求。文章首先介绍了软件体系化建模的概念，并将其与数据建模相联系，强调了数据需求与模型设计之间的统一。接着，深入分析了数据体系化建模的步骤，包括高层模型设计和物理模型设计的协同，确保了数据的可追溯性和一致性。最后，文章还讨论了实施数据治理时对数据质量、安全和合规性的考虑，指出良好的数据质量是确保组织决策可靠性的关键。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136090309",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 50016,
    "commentCount": 443,
    "editUrl": "https://mp.csdn.net/console/editor/html/136090309",
    "postTime": "2024-02-10 13:17:44",
    "diggCount": 33,
    "formatTime": "2024.02.10",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/231590d391bc1b59331c3c12364725e0.png"
    ],
    "collectCount": 28,
    "tags": [
      "大数据",
      "架构",
      "后端",
      "分布式",
      "中间件"
    ]
  },
  {
    "articleId": 136087636,
    "title": "Dynamo：如何让 Amazon 在全球范围内提供高效稳定的分布式存储",
    "description": "Amazon Dynamo是由亚马逊在2007年开发的一种高度可扩展和分布式的键值存储系统，旨在解决公司面临的大规模、任务关键型服务的需求。其起源于亚马逊早期在运营电子商务业务时遇到的挑战，传统的关系型数据库无法满足其大规模、高可用性和分布式存储的需求。因此，亚马逊的工程团队开始寻找一种新的存储解决方案。Amazon Dynamo采用了分布式架构和键值存储模型，实现了高度的可扩展性、灵活性和可定制性，成为许多大型互联网公司处理大规模数据存储和访问的首选解决方案之一。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136087636",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 54658,
    "commentCount": 446,
    "editUrl": "https://mp.csdn.net/console/editor/html/136087636",
    "postTime": "2024-02-09 19:39:44",
    "diggCount": 33,
    "formatTime": "2024.02.09",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8441bfeb92d2954d8abd319553006f99.png"
    ],
    "collectCount": 33,
    "tags": [
      "学习"
    ]
  },
  {
    "articleId": 136073769,
    "title": "DevOps：CI、CD、CB、CT、CD",
    "description": "快速回顾了软件开发流程的演化历程，从传统的瀑布模型到原型模型、螺旋模型、增量模型、敏捷开发，最终到达了当今广受关注的DevOps。接着，深入探讨了DevOps的核心概念和实践，包括开发全流程周期、与传统开发方式的区别以及具体落地方式。其中，特别强调了DevOps的团队文化、流程和工具的重要性。随后，文章介绍了持续集成、持续交付、持续构建、持续测试和持续部署等关键概念，强调了它们在DevOps实践中的关联和重要性。最后，对于每个概念进行了简要的说明，突出了它们在实现DevOps流程中的作用和优势。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136073769",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 54012,
    "commentCount": 471,
    "editUrl": "https://mp.csdn.net/console/editor/html/136073769",
    "postTime": "2024-02-08 00:03:51",
    "diggCount": 39,
    "formatTime": "2024.02.08",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8bb943bd71c46bc90f649e902a5bac70.png"
    ],
    "collectCount": 44,
    "tags": [
      "devops",
      "ci/cd",
      "运维"
    ]
  },
  {
    "articleId": 136007584,
    "title": "构建高效复杂系统的关键：架构与模块详解",
    "description": "复杂系统是由多个相互关联、相互作用的组件组成的大型系统，通过这些组件的协同工作来完成特定的任务或提供特定的服务。在设计复杂系统时，通常会考虑以下五个关键模块：接入系统 (Access System)+应用系统 (Application System)+基础平台 (Foundation Platform)+中间件 (Abundant External Middleware)+支撑系统 (Supporting System)",
    "url": "https://zyfcodes.blog.csdn.net/article/details/136007584",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55601,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/136007584",
    "postTime": "2024-02-03 22:02:07",
    "diggCount": 35,
    "formatTime": "2024.02.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0b3b62b8ad5613c4383cc095532a43ef.png"
    ],
    "collectCount": 30,
    "tags": [
      "系统架构"
    ]
  },
  {
    "articleId": 135898629,
    "title": "云上高可用系统-韧性设计模式",
    "description": "同质化部署是一种部署策略，它指的是在部署时将系统的所有组件集成在一起，然后部署到系统的每个实例上。“拥抱故障”的理念强调了开发者需要在系统的全生命周期中考虑系统如何应对故障，确保系统在故障发生时的状态是符合预期的。因此，一个具备韧性的系统需要在部分故障的情况下仍能够正常运行，即使面对较大规模的故障，系统也能够提供大部分的服务。另外，在大规模系统中，事故定级是一个常见的做法，通过事故定级，可以更有针对性地采取措施，提高系统的韧性。这些模式的综合应用能够帮助构建更具韧性的系统，提高系统的可用性和稳定性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/135898629",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56807,
    "commentCount": 476,
    "editUrl": "https://mp.csdn.net/console/editor/html/135898629",
    "postTime": "2024-01-28 19:48:47",
    "diggCount": 38,
    "formatTime": "2024.01.28",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/408106ce0972dd6a289b69381e29a931.png"
    ],
    "collectCount": 38,
    "tags": [
      "设计模式",
      "系统架构"
    ]
  },
  {
    "articleId": 135887474,
    "title": "空间索引选型指南了解：RTree、Geohash与分布式架构的全解析",
    "description": "空间索引简单思考和架构设计，先通过快速理解空间索引的基本知识如区域编码、区域编码检索、Geohash编码、RTree变体等，然后开始讨论业内的方案对比，最后介绍分布式空间索引架构的设计",
    "url": "https://zyfcodes.blog.csdn.net/article/details/135887474",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 51444,
    "commentCount": 415,
    "editUrl": "https://mp.csdn.net/console/editor/html/135887474",
    "postTime": "2024-01-28 15:19:50",
    "diggCount": 36,
    "formatTime": "2024.01.28",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b8e9f686270e71e572029c40ef01afb9.png"
    ],
    "collectCount": 32,
    "tags": [
      "推荐算法",
      "系统架构",
      "架构"
    ]
  },
  {
    "articleId": 134768083,
    "title": "抖音外卖的秘密：商品模型与用户互动的全景",
    "description": "本文探讨了抖音外卖商品模型及其与传统外卖运营模式的区别。抖音外卖以商品为核心，提供了灵活的商家入驻、商品发布和推广带货流程。文章详细描述了商家如何通过短视频和直播等多样化手段吸引用户，并强调了实时数据监控在优化营销策略中的重要性。通过分析抖音外卖的运营机制，本文旨在为读者提供对这一新兴商业模式的深入理解，以及在快速变化的市场环境中应对挑战的启示。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134768083",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 50998,
    "commentCount": 418,
    "editUrl": "https://mp.csdn.net/console/editor/html/134768083",
    "postTime": "2023-12-03 18:57:10",
    "diggCount": 33,
    "formatTime": "2023.12.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9a71a0ef5529efcc0e17ab8edc4a8e5f.png"
    ],
    "collectCount": 30,
    "tags": [
      "大数据",
      "系统架构",
      "产品运营"
    ]
  },
  {
    "articleId": 134767172,
    "title": "业务数据治理：标准化、数字化与系统化的实践探讨",
    "description": "数据治理的实施流程是一个基于业务数据治理标准框架的标准化操作流程，用于解决具体数据问题：步骤 1：发现问题和制定目标步骤 2：针对问题进行拆解，设计可衡量的指标步骤 3：制定解决SOP和检查研发标准规范步骤 4：推广运营，以拿结果为核心目标步骤 5：总结沉淀方法论，迭代认知",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134767172",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 51124,
    "commentCount": 509,
    "editUrl": "https://mp.csdn.net/console/editor/html/134767172",
    "postTime": "2023-12-03 18:05:45",
    "diggCount": 33,
    "formatTime": "2023.12.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/fafae99d25dba9bb8afe28c45cceb507.png"
    ],
    "collectCount": 34,
    "tags": [
      "数据仓库",
      "系统架构",
      "产品运营"
    ]
  },
  {
    "articleId": 134614460,
    "title": "简化复杂性：抽象思维在业务和技术中的力量",
    "description": "抽象思维是一种认知和思维方式，通过在众多事物中提取共同的、本质性的特征，舍弃非本质的特征，形成概念、判断、推理等思维形式，以反映事物的本质和规律。抽象是将复杂的现实世界简化为更易于理解和处理的概念或模型的过程。这种思维方式使人们能够通过一般性的规律和原则来理解和处理复杂的现实情境。在抽象思维中，人们通过对感性材料的加工制作，去粗取精、去伪存真，从具体事物中提炼出普遍性的特征。这有助于人们更有效地组织和理解信息，提高认知效率，并使得复杂的问题变得更加可管理。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134614460",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 51223,
    "commentCount": 469,
    "editUrl": "https://mp.csdn.net/console/editor/html/134614460",
    "postTime": "2023-11-25 15:58:18",
    "diggCount": 35,
    "formatTime": "2023.11.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6ab3f2592e7c41050a80e5eb192d1950.png"
    ],
    "collectCount": 38,
    "tags": [
      "学习",
      "大数据",
      "推荐算法",
      "系统架构"
    ]
  },
  {
    "articleId": 134363363,
    "title": "掌握 QLExpress：阿里巴巴开源的业务规则动态解析神器",
    "description": "QLExpress（Quick Language Express）是阿里巴巴开源的一门动态脚本引擎解析工具，起源于阿里巴巴的电商业务，旨在解决业务规则、表达式、数学计算等动态脚本的解析问题。线程安全：QLExpress被设计为线程安全的动态脚本引擎，它使用类型的临时变量，确保在引擎运算过程中的并发场景下的线程安全性。高效执行：为了提高执行效率，QLExpress在编译过程中可以将比较耗时的脚本编译结果缓存到本地机器。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134363363",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 60241,
    "commentCount": 434,
    "editUrl": "https://mp.csdn.net/console/editor/html/134363363",
    "postTime": "2023-11-12 23:39:13",
    "diggCount": 29,
    "formatTime": "2023.11.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/3d5923ebd041a7d1277b03b6a7e1020b.png"
    ],
    "collectCount": 61,
    "tags": [
      "express",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 134347139,
    "title": "从“数据飞轮”到质量度量：美团推荐系统的精细化质量管理实践",
    "description": "美团到店综合业务的推荐系统是其关键技术组件，旨在通过智能化方式高效匹配用户需求与多元化本地服务，能够涵盖到综业务中的各个行业，包括但不限于洗浴、KTV、美业、医美、亲子、结婚、运动健身、玩乐、教育培训、家居、宠物、酒吧、生活服务等。这要求推荐系统具有良好的扩展性和适应性，能够处理多样化的业务类型和用户需求。在美团到店综合业务中，推荐系统扮演着关键的角色，是实现供给和需求高效匹配的重要环节。其作用类似于一座智能的桥梁，连接用户的需求与各类本地服务，确保用户能够迅速而准确地找到符合其期望的服务。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134347139",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 50887,
    "commentCount": 498,
    "editUrl": "https://mp.csdn.net/console/editor/html/134347139",
    "postTime": "2023-11-11 17:49:02",
    "diggCount": 13,
    "formatTime": "2023.11.11",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/83d7e6b0e67fa1a425329279d249070a.png"
    ],
    "collectCount": 13,
    "tags": [
      "产品运营",
      "推荐算法"
    ]
  },
  {
    "articleId": 134223322,
    "title": "推荐引擎的魔力：个性化推荐背后的技术",
    "description": "推荐引擎的工作过程是一个复杂的流程，需要深入了解用户兴趣、文章内容和各种推荐算法，以生成个性化的推荐列表。这个过程结合了用户行为数据的分析、用户画像、文章画像以及不同的推荐策略，以提供用户满意的推荐体验。不同的推荐系统可以根据需求和数据采用不同的组合和算法。在建立用户画像和文章画像之后，推荐引擎可以根据需求采用不同的推荐算法来为用户提供文章推荐。主要的推荐算法分为两大类：基于统计的静态召回算法和个性化召回算法。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134223322",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 52258,
    "commentCount": 439,
    "editUrl": "https://mp.csdn.net/console/editor/html/134223322",
    "postTime": "2023-11-04 21:58:50",
    "diggCount": 13,
    "formatTime": "2023.11.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/4367dbbce98a0a4d42f268413ce6fa74.png"
    ],
    "collectCount": 19,
    "tags": [
      "推荐算法",
      "系统架构"
    ]
  },
  {
    "articleId": 134221229,
    "title": "搜索引擎是如何理解你的查询并提供精准结果的？",
    "description": "搜索引擎是一种强大的工具，帮助你快速找到互联网上的信息。它通过使用复杂的算法，迅速检索成千上万甚至数十亿的网页，并将与你的搜索查询相关的结果呈现给你。搜索引擎背后涉及多种关键技术，它们协同工作以实现高效的信息检索和呈现。搜索引擎通常由三个核心组件构成：爬虫系统、索引系统和检索系统。这些组件协同工作，使搜索引擎能够从互联网上检索、索引和呈现相关的信息。我们可以展开快速学习一下。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134221229",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 53399,
    "commentCount": 497,
    "editUrl": "https://mp.csdn.net/console/editor/html/134221229",
    "postTime": "2023-11-04 19:47:10",
    "diggCount": 13,
    "formatTime": "2023.11.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/218bd5030a17a44b75f06375d3a28894.png"
    ],
    "collectCount": 24,
    "tags": [
      "搜索引擎",
      "系统架构",
      "后端"
    ]
  },
  {
    "articleId": 134213027,
    "title": "构建推荐系统的相似检索技术：从距离度量到深度学习的快速了解",
    "description": "相似检索方法是一种用于从大量数据中找到与查询数据相似的数据项的技术。这种方法通常用于信息检索、推荐系统、图像处理、自然语言处理等领域。相似检索主要方法可以总体分为以下几类：这些方法各自有其适用的场景和特点，选择合适的相似检索方法取决于应用的需求、数据类型和性能要求。通常，研究和实践中会根据具体情况采用不同的方法或它们的组合来解决相似检索问题。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134213027",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56367,
    "commentCount": 449,
    "editUrl": "https://mp.csdn.net/console/editor/html/134213027",
    "postTime": "2023-11-04 01:18:58",
    "diggCount": 13,
    "formatTime": "2023.11.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9262c255f87d530671a5dc322a30f063.png"
    ],
    "collectCount": 20,
    "tags": [
      "算法",
      "后端",
      "推荐算法"
    ]
  },
  {
    "articleId": 134212094,
    "title": "高效检索 LevelDB：内存管理与缓存加速的最佳实践",
    "description": "学习LevelDB架构的检索技术：LevelDB的检索和存储设计提供了许多启发和优化方向，这些思想和技术可以在构建其他检索系统时考虑和借鉴，以提高性能、效率和可伸缩性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134212094",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 53209,
    "commentCount": 514,
    "editUrl": "https://mp.csdn.net/console/editor/html/134212094",
    "postTime": "2023-11-04 00:03:12",
    "diggCount": 13,
    "formatTime": "2023.11.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/80d14a6b47fe542a2466f2b0b88aaaaa.png"
    ],
    "collectCount": 18,
    "tags": [
      "架构",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 134172514,
    "title": "智选球员：运用动态规划提升棒球队的签约效益",
    "description": "动态规划：签约棒球自由球员我们定义了一个二维数组 dp，其中 dp[i][j] 表示在考虑前 i 个位置且预算不超过 j 时的最大总VORP值。通过状态转移方程更新 dp 数组，不选择当前位置球员的情况与选择当前位置球员的情况进行比较，选择VORP值更高的方案。最终通过回溯 dp 数组，确定具体选择的球员。时间复杂度为 O(N×X×P)，其中 N是位置数量，X是预算，P 是每个位置上球员的平均数量。空间复杂度为 O(N×X)，主要用于存储 dp 数组和选择标记数组 chosen。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/134172514",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 30417,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/134172514",
    "postTime": "2023-11-01 23:45:14",
    "diggCount": 14,
    "formatTime": "2023.11.01",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/421a725342774cb39798fc7aed35ce11.png"
    ],
    "collectCount": 13,
    "tags": [
      "算法"
    ]
  },
  {
    "articleId": 133976569,
    "title": "搜索问答技术概述：基于知识图谱与MRC的创新应用",
    "description": "研究问答系统在各领域的需求类型，处理多样数据源和不同文本形态的能力。关键技术包括基于知识图谱的KBQA和基于深度学习的DeepQA。KBQA重点在结构化数据上，而DeepQA结合了搜索和机器阅读理解，适用于更广泛非结构化数据。探讨了短答案和长答案机器阅读理解，面对挑战如搜索结果噪声和常识性错误。文章旨在提供深入了解问答系统技术和应用领域的资源。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133976569",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55983,
    "commentCount": 465,
    "editUrl": "https://mp.csdn.net/console/editor/html/133976569",
    "postTime": "2023-10-22 19:42:12",
    "diggCount": 15,
    "formatTime": "2023.10.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/ab6c2849cf8ede5b0b7d47959fb9a450.png"
    ],
    "collectCount": 40,
    "tags": [
      "学习",
      "nlp",
      "MRC"
    ]
  },
  {
    "articleId": 133973152,
    "title": "复杂性真相：软件开发中的潜在陷阱与解决策略",
    "description": "系统复杂性是指系统的构建、运作和维护过程中涉及到的多个因素、组件、关系和交互的综合程度。认识软件的复杂性之前，需要找到合适的方法来度量一个软件系统是否复杂，以及复杂度有多少。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133973152",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 54420,
    "commentCount": 447,
    "editUrl": "https://mp.csdn.net/console/editor/html/133973152",
    "postTime": "2023-10-22 15:33:54",
    "diggCount": 14,
    "formatTime": "2023.10.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6610b2f4ed3339e0ca4d4fa27856580a.png"
    ],
    "collectCount": 16,
    "tags": [
      "系统架构"
    ]
  },
  {
    "articleId": 133967931,
    "title": "SQL 查询秘籍：提升你数据库技能的实用指南",
    "description": "介绍数据库查询中一些高级技巧和常用表达式的使用方法：涵盖常用表表达式（CTEs）、递归CTEs、临时函数、数据的枢转、EXCEPT 和 NOT IN 操作符、自联结、排名函数、计算差值和总数、以及日期时间处理等内容。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133967931",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 57731,
    "commentCount": 455,
    "editUrl": "https://mp.csdn.net/console/editor/html/133967931",
    "postTime": "2023-10-21 23:55:13",
    "diggCount": 16,
    "formatTime": "2023.10.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/818dd3fce03044bcaaaf8ac0cfec71a1.png"
    ],
    "collectCount": 18,
    "tags": [
      "mysql"
    ]
  },
  {
    "articleId": 133829892,
    "title": "为什么问题总是反复出现？用 7 步追问法来解答！",
    "description": "\"7 步追问法\" 是一种问题分析和解决方法，旨在帮助人们更全面地理解问题、找到问题的根本原因，并确定解决问题的途径。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829892",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56368,
    "commentCount": 405,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829892",
    "postTime": "2023-10-14 20:38:57",
    "diggCount": 14,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e8cd2618f8e46420ac9eba4dcc139845.webp?x-image-process=image/format,png"
    ],
    "collectCount": 14,
    "tags": [
      "学习方法",
      "职场和发展"
    ]
  },
  {
    "articleId": 133829848,
    "title": "MYSQL InnoDB 行格式揭秘：探讨数据行头信息的关键组成",
    "description": "在数据库管理系统中，理解数据行格式的内部结构对于优化性能和确保数据完整性至关重要。这次我们来探讨一下数据行格式，特别关注行头信息的各个属性，如delete_mask、min_rec_flag、n_owned、heap_no、record_type和next_record等。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829848",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 57079,
    "commentCount": 465,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829848",
    "postTime": "2023-10-14 20:36:23",
    "diggCount": 15,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a4f4b7d65ee931da5e6082ccac140038.png"
    ],
    "collectCount": 13,
    "tags": [
      "数据库",
      "oracle",
      "mysql",
      "sql",
      "postgresql"
    ]
  },
  {
    "articleId": 133829770,
    "title": "掌握正则表达式：从基础到实用示例",
    "description": "本文介绍了正则表达式在Java编程中的基本概念和应用。首先，简要解释了正则表达式的语法规则，随后通过具体示例展示了如何在Java中使用正则表达式进行模式匹配、字符串替换和数据验证。通过理解和掌握正则表达式，开发者可以高效地处理复杂的字符串操作，提高代码的灵活性和可读性。希望本文能为读者提供有价值的参考，助力在实际开发中更好地利用正则表达式。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829770",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55430,
    "commentCount": 407,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829770",
    "postTime": "2023-10-14 20:31:28",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/cba01445f515c1acf2232909788729a9.png"
    ],
    "collectCount": 12,
    "tags": [
      "正则表达式",
      "后端"
    ]
  },
  {
    "articleId": 133829743,
    "title": "探索数据的力量：Elasticsearch中指定链表字段的统计查询记录",
    "description": "本文探讨了在Elasticsearch中对sell_product_order索引中sellingProducts字段进行基本统计操作的方法。通过一系列具体查询示例，介绍了如何计算产品类型的频率、检索指定文档的产品数量，以及对产品类型进行细分统计。这些统计方法不仅增强了数据分析能力，还为业务决策提供了支持。文章强调了Elasticsearch的灵活性和高效性，并鼓励读者进一步探索其更多功能，以提升数据处理和决策支持的能力。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829743",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56206,
    "commentCount": 461,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829743",
    "postTime": "2023-10-14 20:29:42",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/e452a03c5186499c84e7209a1e67a328.png"
    ],
    "collectCount": 12,
    "tags": [
      "性能优化",
      "es",
      "搜索引擎"
    ]
  },
  {
    "articleId": 133829707,
    "title": "优化分布式系统性能：热key识别与实战解决方案",
    "description": "热key问题在分布式缓存系统中是一个常见但具有挑战性的难题。有效地发现和处理热key不仅可以提升系统的性能和稳定性，还能显著改善用户体验。本文从热key的定义及其危害出发，深入探讨了热key产生的多种原因，并介绍了几种主流的热key发现解决方案。通过人为预测，客户端监控，机器层面监控，Redis服务端Monitor以及热点发现系统等多种手段，可以及时识别并处理潜在的热点key。每种解决方案都有其独特的优势和局限性，应根据具体业务场景选择合适的策略进行实施。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829707",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56478,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829707",
    "postTime": "2023-10-14 20:27:34",
    "diggCount": 18,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/36b329e71227fabaf0aaa8f544af7ffd.png"
    ],
    "collectCount": 22,
    "tags": [
      "性能优化",
      "分布式",
      "redis"
    ]
  },
  {
    "articleId": 133829596,
    "title": "高可用系统设计思想：实现业务持续稳定的必经之路",
    "description": "系统的高可用性是当今数字化时代中至关重要的一环，高可用性不仅对于保障业务的稳定运行和持续发展至关重要，而且是维护客户关系、增强品牌价值、履行法律责任的关键保障。在当今数字化时代，任何企业都应该将高可用性视为优先考虑的重要议题，并投入适当的资源和技术来建立和维护可靠的系统架构。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829596",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55383,
    "commentCount": 475,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829596",
    "postTime": "2023-10-14 20:20:05",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/506058b9665eb47bd4631ed17739c032.png"
    ],
    "collectCount": 13,
    "tags": [
      "系统架构",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 133829575,
    "title": "复用的力量：实现企业级能力共享的架构设计",
    "description": "对架构复用理解分析：在架构设计中实现系统的高可复用性需要考虑多个方面，一般包括技术复用和业务复用。从复用的程度可以依次划分为产品复用>业务流程复用>业务实体复用>组件复用>代码复用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829575",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55794,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829575",
    "postTime": "2023-10-14 20:19:08",
    "diggCount": 14,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/bd0044d81ece9489d7a0f38b0eb5c938.png"
    ],
    "collectCount": 16,
    "tags": [
      "系统架构",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 133829561,
    "title": "单体到微服务：电商平台架构的演变与可扩展性探索",
    "description": "可扩展性是软件架构中至关重要的特性，它确保系统能够在需求增长和规模扩大的情况下保持高效运行。为实现可扩展性，首要考虑模块化设计，将系统分解为独立、低耦合的模块，使得扩展时能够有针对性地进行修改而不影响整体。同时，水平扩展和垂直扩展是两种常见的扩展策略，前者通过增加节点或服务器来分担负载，后者则通过提升单节点性能来处理更多请求。弹性设计是实现可扩展性的关键，系统需要能够动态地分配和释放资源，以适应负载的波动。采用服务化架构，将系统拆解成小型服务单元，有助于独立开发和扩展。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829561",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56595,
    "commentCount": 471,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829561",
    "postTime": "2023-10-14 20:18:15",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/da9f739be8a616975e66f1f29d2e0bf4.png"
    ],
    "collectCount": 18,
    "tags": [
      "系统架构",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 133829536,
    "title": "高并发场景下的缓存雪崩探析与应对策略",
    "description": "在高并发场景中，缓存作为前置查询机制，显著减轻了数据库的压力。然而，缓存雪崩问题依然存在，可能导致大量请求直接涌入数据库，引发系统性能瓶颈甚至崩溃。本文探讨了缓存雪崩的定义和成因，提出了三种应对策略：分散过期时间、提前演练压测、cache高可用和后端数据库限流。通过分散缓存失效时间、提前发现和优化系统性能瓶颈，以及提升缓存资源的可用性和保护数据库的稳定性，这些策略可有效防止缓存雪崩，保障系统在高并发情况下的可靠性和性能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829536",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55451,
    "commentCount": 431,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829536",
    "postTime": "2023-10-14 20:16:38",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f2725ccfa76833abe0b683f5e2be2404.png"
    ],
    "collectCount": 14,
    "tags": [
      "缓存",
      "redis",
      "分布式"
    ]
  },
  {
    "articleId": 133829338,
    "title": "多线程编程全攻略：提升性能与线程安全的必备知识",
    "description": "介绍多线程编程的相关概念、同步机制以及无锁编程。从线程的基础概念出发，包括逻辑线程和硬件线程的比较，以及线程、核心和函数的关系。随后，我们探讨了多线程编程的基本原则，包括时间分片、上下文切换、线程安全函数和可重入函数等。接着，我们讨论了为什么需要多线程同步、什么情况需要进行同步以及多线程同步的方式，包括串行化、原子操作和锁等。我们还深入研究了非阻塞的无锁同步机制，如CAS循环和无锁数据结构。最后，我们解释了程序序、内存序、乱序执行、存储缓冲区和失效队列等概念，以帮助更好地理解多线程编程。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133829338",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56150,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/133829338",
    "postTime": "2023-10-14 20:02:37",
    "diggCount": 16,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/644f9c2638a1d497d29cd482e4b7e0d1.png"
    ],
    "collectCount": 21,
    "tags": [
      "java",
      "后端",
      "性能优化"
    ]
  },
  {
    "articleId": 133828729,
    "title": "探索Aviator：轻量级Java动态表达式求值引擎的使用指南",
    "description": "本文探讨了Aviator引擎在Java中的动态表达式求值功能，重点介绍其在复杂条件判断和代码可维护性方面的优势。Aviator通过允许开发者以简洁的方式编写逻辑，提高了代码的灵活性和可读性，减少了冗余代码的出现。文章还提供了示例代码，展示了如何在项目中有效应用Aviator，使其成为开发者实现动态逻辑处理的强大工具。总之，Aviator为Java编程带来了新的可能性，值得每位开发者去探索和实践。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133828729",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20370,
    "commentCount": 550,
    "editUrl": "https://mp.csdn.net/console/editor/html/133828729",
    "postTime": "2023-10-14 19:22:18",
    "diggCount": 25,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7c254c7fa1fcf40fa9ffb18ee353bd08.webp?x-image-process=image/format,png"
    ],
    "collectCount": 56,
    "tags": [
      "java",
      "开发语言",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 133828661,
    "title": "Restful API优雅原则统一规范",
    "description": "本部分预留作业，后续总结后分享。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133828661",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55392,
    "commentCount": 444,
    "editUrl": "https://mp.csdn.net/console/editor/html/133828661",
    "postTime": "2023-10-14 18:56:28",
    "diggCount": 14,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/477e959406cc3fdc1ca8881efc2ebd6a.png"
    ],
    "collectCount": 14,
    "tags": [
      "restful",
      "oneapi"
    ]
  },
  {
    "articleId": 133828628,
    "title": "高并发场景下的缓存击穿问题探析与应对策略",
    "description": "在高并发场景中，缓存作为前置查询机制，显著减轻了数据库的压力，提高了系统性能。然而，缓存击穿问题可能导致大量请求同时到达数据库，引发系统性能瓶颈甚至崩溃。本文详细探讨了缓存击穿的定义和成因，提出了三种应对策略：互斥锁、软过期+互斥锁、静态数据+Lazy Expiration。通过引入分布式锁和逻辑过期时间等机制，这些策略可以有效防止缓存击穿，减少数据库压力，确保系统在高并发情况下的稳定性和性能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133828628",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55472,
    "commentCount": 428,
    "editUrl": "https://mp.csdn.net/console/editor/html/133828628",
    "postTime": "2023-10-14 18:51:27",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/899347b701967f1305d51b8c075019b1.png"
    ],
    "collectCount": 12,
    "tags": [
      "redis",
      "缓存",
      "分布式"
    ]
  },
  {
    "articleId": 133828614,
    "title": "高并发场景下的大 Key 问题及应对策略",
    "description": "本文探讨了高并发场景下的大 Key 问题及应对策略。大 Key 可能导致响应超时和数据不均衡，严重影响系统性能和稳定性。针对这些挑战，文章提出了拆分大 Key、分拆集合数据和数据压缩等多种解决方案。拆分大 Key 可以减轻单节点压力，提高系统吞吐量；分拆集合数据和合理分片则有助于优化数据访问效率和负载均衡；而数据压缩技术则能减少存储空间和网络传输成本。这些策略的综合应用有助于提升缓存系统在高并发环境下的可靠性和性能表现。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133828614",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 55601,
    "commentCount": 382,
    "editUrl": "https://mp.csdn.net/console/editor/html/133828614",
    "postTime": "2023-10-14 18:49:53",
    "diggCount": 14,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/66e85eecf5cf31a963935d2c34789fc9.png"
    ],
    "collectCount": 12,
    "tags": [
      "缓存",
      "redis",
      "分布式"
    ]
  },
  {
    "articleId": 133828594,
    "title": "RedLock 与 Redisson 实现分布式锁---算法与应用",
    "description": "分布式锁在分布式系统中至关重要，它能够确保对共享资源的互斥访问并避免数据冲突。RedLock 算法通过在多个 Redis 节点上实现分布式锁来提升锁的可靠性，即使部分节点发生故障，也能保证锁的有效性。本文介绍了 RedLock 的基本思路和实现步骤，包括锁获取、超时计算和失败处理等关键操作。另一方面，Redisson 作为 Redis 的 Java 客户端，简化了分布式锁的实现过程，提供了易于使用的 API 以及内置的看门狗机制来自动续期锁，确保业务逻辑在锁有效期内顺利执行。通过比较 RedLock 和 R",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133828594",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 56485,
    "commentCount": 482,
    "editUrl": "https://mp.csdn.net/console/editor/html/133828594",
    "postTime": "2023-10-14 18:46:56",
    "diggCount": 13,
    "formatTime": "2023.10.14",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/e49f78a289cd4c03bdbeeef582ac393b.png"
    ],
    "collectCount": 14,
    "tags": [
      "redis",
      "分布式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 133615069,
    "title": "Elasticsearch 的索引管理与映射配置实战",
    "description": "本文介绍了 Elasticsearch 中索引与映射的基本概念及其重要性。通过详细的操作示例，阐述了如何创建、更新和删除索引，以及如何定义和调整映射以优化数据存储与查询性能。文章强调了选择适当数据类型和字段属性、动态映射调整的重要性，以及索引生命周期管理（ILM）对提升性能的作用。希望读者能够掌握这些基础知识，提升数据管理和搜索效率。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133615069",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 19434,
    "commentCount": 440,
    "editUrl": "https://mp.csdn.net/console/editor/html/133615069",
    "postTime": "2023-10-06 23:00:55",
    "diggCount": 14,
    "formatTime": "2023.10.06",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8faea8f5d32c355cc5514f6819a7af09.png"
    ],
    "collectCount": 22,
    "tags": [
      "elasticsearch",
      "大数据",
      "搜索引擎"
    ]
  },
  {
    "articleId": 133583097,
    "title": "探索Elasticsearch：节点、分片与路由的工作原理",
    "description": "本文介绍了Elasticsearch作为一种开源搜索引擎的核心特性和优势。Elasticsearch不仅支持高效的全文搜索，还具有分布式架构，能够处理海量实时数据。文章详细探讨了其基本概念，包括节点、分片和路由等，以及在不同应用场景中的实际应用，如电商和社交媒体。通过掌握Elasticsearch的基本原理和使用技巧，开发者可以有效提升系统性能和用户体验，为未来的数据处理和搜索需求做好准备。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133583097",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 18745,
    "commentCount": 437,
    "editUrl": "https://mp.csdn.net/console/editor/html/133583097",
    "postTime": "2023-10-05 21:28:33",
    "diggCount": 16,
    "formatTime": "2023.10.05",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/3ae9acad6eb551af911acf180fbdaf73.png"
    ],
    "collectCount": 20,
    "tags": [
      "elasticsearch",
      "大数据",
      "后端"
    ]
  },
  {
    "articleId": 133515591,
    "title": "分布式环境下的锁机制：Redis与Redisson的应用探讨",
    "description": "本文探讨了分布式锁的概念及其在分布式系统中的重要性，重点介绍了使用Redis和Redisson实现分布式锁的具体方法。通过分析锁的基本原理及其在防止数据冲突和确保数据一致性中的作用，本文指出了分布式锁在高并发环境下的应用价值。文章还讨论了Redisson作为一种高效的分布式锁解决方案的优势，以及在实际开发中应注意的配置和使用策略。通过合理应用分布式锁，开发者能够提升系统的稳定性和可靠性，从而在复杂的分布式架构中有效管理资源。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133515591",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 19035,
    "commentCount": 482,
    "editUrl": "https://mp.csdn.net/console/editor/html/133515591",
    "postTime": "2023-10-03 15:39:02",
    "diggCount": 15,
    "formatTime": "2023.10.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1f49e8e28991d7da0e1f41f453ba9b5c.webp?x-image-process=image/format,png"
    ],
    "collectCount": 19,
    "tags": [
      "redis",
      "分布式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 133501947,
    "title": "如何选择适合的存储方案：需求分析与决策示例模版",
    "description": "存储选型决策案例模板是一种有助于组织或个人更有效地选择适合其需求的存储解决方案的工具。它通过提供结构和透明度，帮助确保决策是基于充分的信息和综合的分析，从而降低了不明智的决策风险。提醒：依然是模版，所以也可以应用与其他选型决策！",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133501947",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 15373,
    "commentCount": 478,
    "editUrl": "https://mp.csdn.net/console/editor/html/133501947",
    "postTime": "2023-10-03 01:20:02",
    "diggCount": 14,
    "formatTime": "2023.10.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d1deca56fbbb68098128f395cac9c142.webp?x-image-process=image/format,png"
    ],
    "collectCount": 14,
    "tags": [
      "软件工程",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 133472816,
    "title": "从需求分析到上线方案：大型项目开发设计文档规范指南",
    "description": "本文系统性地探讨了软件开发过程中的各个关键环节，包括需求文档分析、系统现状评估、概要设计与详细设计、测试方案以及上线策略。通过对业务需求文档（BRD）、市场需求文档（MRD）和产品需求文档（PRD）的深入分析，文章强调了需求理解对项目成功的重要性。进一步地，系统现状分析帮助开发团队识别与现有功能的关联与影响，为新功能的开发提供了重要依据。文章还讨论了测试与上线策略的制定，以降低风险、提升用户体验。最后，文章总结了项目管理中的排期与风险分析，强调了团队协作在系统开发中的关键作用，为读者提供了一份实用的开发指南",
    "url": "https://zyfcodes.blog.csdn.net/article/details/133472816",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 17800,
    "commentCount": 472,
    "editUrl": "https://mp.csdn.net/console/editor/html/133472816",
    "postTime": "2023-10-02 00:37:37",
    "diggCount": 19,
    "formatTime": "2023.10.02",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/077f7474d2a0a5c198f24bcb64aa568d.png"
    ],
    "collectCount": 51,
    "tags": [
      "软件工程",
      "后端",
      "系统架构"
    ]
  },
  {
    "articleId": 132866513,
    "title": "Elasticsearch基础文档操作完全演示指南",
    "description": "了解和掌握在 Elasticsearch 中执行文档写入和更新操作的方法和技术，以便更好地管理和维护 Elasticsearch 索引中的数据。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/132866513",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 18884,
    "commentCount": 473,
    "editUrl": "https://mp.csdn.net/console/editor/html/132866513",
    "postTime": "2023-09-13 23:11:54",
    "diggCount": 17,
    "formatTime": "2023.09.13",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d4fccba2710fbec7bbbd54548f22fade.png"
    ],
    "collectCount": 15,
    "tags": [
      "搜索引擎",
      "全文检索",
      "图搜索算法"
    ]
  },
  {
    "articleId": 132718410,
    "title": "科普大模型入门指南：定义、应用与训练方法",
    "description": "本文探讨了大语言模型的基本概念、训练机制以及其在各个领域的广泛应用。大模型通过深度学习技术，能够理解和生成自然语言，改变了人机交互的方式。文章分析了大模型的训练过程，并讨论了其在智能助手、内容生成、数据分析等领域的潜力。与此同时，我们也关注了在模型使用中面临的伦理、安全和可解释性等挑战。展望未来，本文强调了有效控制和监管的重要性，以确保大模型的安全和负责任使用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/132718410",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 26165,
    "commentCount": 1157,
    "editUrl": "https://mp.csdn.net/console/editor/html/132718410",
    "postTime": "2023-09-06 17:54:16",
    "diggCount": 39,
    "formatTime": "2023.09.06",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/2047e842978c74571f21bbce4cd1f789.png"
    ],
    "collectCount": 209,
    "tags": [
      "语言模型",
      "后端",
      "算法",
      "人工智能"
    ]
  },
  {
    "articleId": 132515850,
    "title": "解读软件架构的复杂性：业务和技术的双重挑战",
    "description": "本文探讨了软件架构中的复杂性及其对业务成功的影响。随着技术和业务环境的快速变化，架构师面临着管理日益增加的复杂性挑战。文章分析了影响架构复杂性的关键因素，如技术选择、团队协作和需求变更，并提出了一系列应对策略，包括明确的架构决策流程和持续的架构评估。通过强调沟通与合作，架构师可以更有效地应对复杂性，从而为企业创造持久的价值。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/132515850",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20028,
    "commentCount": 412,
    "editUrl": "https://mp.csdn.net/console/editor/html/132515850",
    "postTime": "2023-08-26 21:54:21",
    "diggCount": 15,
    "formatTime": "2023.08.26",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/2ae58344ae3ebb3107e39b0424fdd73d.png"
    ],
    "collectCount": 20,
    "tags": [
      "软件工程",
      "后端",
      "分布式",
      "系统架构",
      "架构"
    ]
  },
  {
    "articleId": 132419533,
    "title": "深入探讨互联网广告：变现机制与行业趋势",
    "description": "无论是互联网企业还是传统的其他企业情况，变现模式比如说用户直接付费、佣金分成、内容付费、电子商务、金融运作、增值服务等，哪怕刚开始选择的是其他变现模式，最终也还是免不了要增加广告产品进行变现，也就是说广告才是互联网产品最常见的变现模式。本文对广告产品进行基本分析和变现模式分析",
    "url": "https://zyfcodes.blog.csdn.net/article/details/132419533",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20897,
    "commentCount": 466,
    "editUrl": "https://mp.csdn.net/console/editor/html/132419533",
    "postTime": "2023-08-22 01:11:39",
    "diggCount": 23,
    "formatTime": "2023.08.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/11056e8f522ffc34cd22074b0c3caa36.png"
    ],
    "collectCount": 37,
    "tags": [
      "产品经理",
      "产品运营",
      "后端"
    ]
  },
  {
    "articleId": 131928432,
    "title": "风控系统中的架构设计原型图分析与实践探讨",
    "description": "本文探讨了风控系统的架构设计原型图在风险管理中的重要性。通过分析多个案例，文章展示了如何利用架构设计原型图提升团队沟通效率，优化系统结构与功能。强调了良好的架构设计不仅有助于系统的可扩展性和可维护性，还能增强对风险的应对能力。最后，呼吁金融行业持续关注技术进步与市场需求变化，以不断提升风控系统的设计与实施效果。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/131928432",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21472,
    "commentCount": 468,
    "editUrl": "https://mp.csdn.net/console/editor/html/131928432",
    "postTime": "2023-07-26 01:05:32",
    "diggCount": 18,
    "formatTime": "2023.07.26",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/ac9054f9e3d3159830d99922a6766add.png"
    ],
    "collectCount": 38,
    "tags": [
      "微服务",
      "架构",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 131026729,
    "title": "从美团Sonic的成功应用深入理解Java热部署",
    "description": "本文探讨了Java热部署技术的基本概念及其实际应用，重点分析了美团在开发过程中使用Sonic热部署框架的经验。通过实现无缝更新，热部署显著提升了开发效率和用户体验，减少了系统停机时间。美团的实践案例展示了热部署在大规模分布式系统中的应用价值，为企业在敏捷开发与持续交付方面提供了有效的借鉴。随着技术的不断进步，热部署将在软件开发中发挥愈加重要的作用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/131026729",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21378,
    "commentCount": 429,
    "editUrl": "https://mp.csdn.net/console/editor/html/131026729",
    "postTime": "2023-06-03 23:42:28",
    "diggCount": 18,
    "formatTime": "2023.06.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/ab10f27751b569765ef7f2706309b154.png"
    ],
    "collectCount": 25,
    "tags": [
      "后端",
      "java",
      "系统架构",
      "架构",
      "开源"
    ]
  },
  {
    "articleId": 130903779,
    "title": "Spring Boot 启动过程与自动配置详解：从源码到实现",
    "description": "分析SpringBoot启动配置原理：给出整体初步分析和对应流程图，并从三方面进行展开分析（SpringApplication构造过程分析+SpringApplication启动过程分析+SpringBoot自动配置分析）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130903779",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 25031,
    "commentCount": 470,
    "editUrl": "https://mp.csdn.net/console/editor/html/130903779",
    "postTime": "2023-05-27 17:31:59",
    "diggCount": 33,
    "formatTime": "2023.05.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/927d0d393feabba0788344e292bc1b37.png"
    ],
    "collectCount": 76,
    "tags": [
      "spring boot",
      "spring"
    ]
  },
  {
    "articleId": 130716074,
    "title": "高效I/O处理：模型与多路复用的探讨",
    "description": "本文介绍了 I/O 操作的五种主要模型：阻塞 I/O、非阻塞 I/O、同步 I/O、异步 I/O 和信号驱动 I/O，并分析了它们在现代计算机系统中的应用。重点讨论了多路复用技术（如 select、poll 和 epoll）在高并发场景中的重要性及其如何提升 I/O 操作的效率。通过对这些模型和技术的深入理解，开发者能够选择合适的 I/O 方案，以优化应用性能，提升用户体验。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130716074",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 51640,
    "commentCount": 440,
    "editUrl": "https://mp.csdn.net/console/editor/html/130716074",
    "postTime": "2023-05-16 23:24:18",
    "diggCount": 13,
    "formatTime": "2023.05.16",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1b89ca0a034955da471654c16f094405.png"
    ],
    "collectCount": 14,
    "tags": [
      "网络",
      "后端"
    ]
  },
  {
    "articleId": 130469938,
    "title": "探索常识性概念图谱：构建智能生活的知识桥梁",
    "description": "本文探讨了常识性概念图谱的构建及其在智能问答系统中的应用。常识性概念图谱是将人类常识进行系统化和结构化表示的知识图谱，旨在提升机器对常识的理解与应用能力。文章首先介绍了常识性概念图谱的构建过程，包括知识获取、图谱建模与知识融合等步骤。随后，分析了其在智能问答系统中的实际应用效果，强调了常识性知识在提升问答准确性和智能化服务中的重要性。通过实例展示，本文强调常识性概念图谱在未来智能服务中的广泛前景和潜在影响。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130469938",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20588,
    "commentCount": 425,
    "editUrl": "https://mp.csdn.net/console/editor/html/130469938",
    "postTime": "2023-05-03 11:22:36",
    "diggCount": 16,
    "formatTime": "2023.05.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/590757d94ed20e5bb6b937db3e0ce96e.png"
    ],
    "collectCount": 21,
    "tags": [
      "人工智能",
      "后端",
      "架构"
    ]
  },
  {
    "articleId": 130464048,
    "title": "B+树的高度与查询效率：InnoDB存储引擎的设计哲学",
    "description": "本文探讨了InnoDB存储引擎中B+树的结构和优化策略，重点分析了其通常为3到4层的树高如何满足高效的数据存储与检索需求。文章从B+树的基本结论入手，简要分析了存储引擎的B+树结构，推导了主键索引的B+树特性，以及InnoDB页面的内部结构。进一步剖析了InnoDB数据文件的特征，并总结了计算B+树高度的一般思路。通过深入解析，本文揭示了InnoDB如何通过聚簇索引、页分裂和合并等机制优化查询性能，为数据库设计提供了重要的参考。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130464048",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21552,
    "commentCount": 416,
    "editUrl": "https://mp.csdn.net/console/editor/html/130464048",
    "postTime": "2023-05-02 16:32:11",
    "diggCount": 23,
    "formatTime": "2023.05.02",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/78116874ce522054825c64036139726b.png"
    ],
    "collectCount": 28,
    "tags": [
      "mysql",
      "b树",
      "数据库",
      "后端"
    ]
  },
  {
    "articleId": 130457788,
    "title": "反应式编程的魅力：Reactive Streams与Reactor框架探索",
    "description": "本文探讨了Reactive Streams编程模型的核心概念及其在现代软件开发中的应用。我们分析了Reactor框架的设计原理，强调了其在处理异步数据流、实现高效的错误处理和回压机制方面的优势。通过实例，展示了Reactive Streams在微服务架构和实时数据处理中的重要性。希望通过这篇文章，读者能够深入理解响应式编程的价值，并在实际开发中灵活应用这一强大工具。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130457788",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21255,
    "commentCount": 440,
    "editUrl": "https://mp.csdn.net/console/editor/html/130457788",
    "postTime": "2023-05-01 20:19:36",
    "diggCount": 22,
    "formatTime": "2023.05.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/2b788705d9532ad578a7611438dd5325.png"
    ],
    "collectCount": 28,
    "tags": [
      "java",
      "jdk",
      "后端",
      "性能优化"
    ]
  },
  {
    "articleId": 130456859,
    "title": "事件风暴工作坊：构建清晰领域模型与合理微服务拆分的指南",
    "description": "本文详细介绍了事件风暴（Event Storming）方法在复杂业务领域建模中的应用。事件风暴通过团队成员的头脑风暴，挖掘业务流程中的关键事件，构建出领域模型，并为微服务的拆分与设计提供依据。文章从事件风暴的基本概念、准备工作、参与角色、场地与材料、分析要点等方面展开，逐步深入到如何构建领域模型，识别聚合根和限界上下文。最后，还针对事件粒度、歧义处理、领域模型拆分等常见问题提供了解决思路，为读者深入理解事件风暴及其在实际项目中的应用提供了实践参考。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130456859",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 19317,
    "commentCount": 425,
    "editUrl": "https://mp.csdn.net/console/editor/html/130456859",
    "postTime": "2023-05-01 17:25:09",
    "diggCount": 15,
    "formatTime": "2023.05.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a1d5e376b5b77d83dec77b872c1c0422.png"
    ],
    "collectCount": 17,
    "tags": [
      "设计规范",
      "软件工程",
      "需求分析"
    ]
  },
  {
    "articleId": 130456197,
    "title": "Java回收垃圾的基本过程与常用算法",
    "description": "Java 垃圾回收的基本过程可以分为以下三个步骤：垃圾分类、垃圾查找和垃圾清理，我们可以展开分析，并详细讲下垃圾算法的基本内容",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130456197",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23441,
    "commentCount": 469,
    "editUrl": "https://mp.csdn.net/console/editor/html/130456197",
    "postTime": "2023-05-01 16:15:40",
    "diggCount": 24,
    "formatTime": "2023.05.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/912620791f7e6751954feadcd79dd836.png"
    ],
    "collectCount": 34,
    "tags": [
      "java",
      "jvm",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 130191656,
    "title": "如何快速设计一个高并发系统？",
    "description": "高并发系统设计与优化高并发系统设计应包括：系统拆分：功能和数据拆分提升扩展性。缓存机制：利用本地和分布式缓存（如Redis）减少数据库负担。消息队列：使用MQ（如Kafka）处理流量，支持异步处理。分库分表：将数据分布到多个数据库和表中。读写分离：主从数据库架构优化读写性能。搜索引擎：用ElasticSearch进行高效检索。性能监控：进行压力测试和实时监控，保证系统稳定。这些策略能有效提升高并发场景下的系统性能和稳定性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130191656",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20817,
    "commentCount": 421,
    "editUrl": "https://mp.csdn.net/console/editor/html/130191656",
    "postTime": "2023-04-17 07:50:56",
    "diggCount": 15,
    "formatTime": "2023.04.17",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/68374d34043543f099b20caa8026e413.png"
    ],
    "collectCount": 18,
    "tags": [
      "后端",
      "架构",
      "rabbitmq",
      "elasticsearch",
      "database",
      "redis",
      "数据库"
    ]
  },
  {
    "articleId": 130191653,
    "title": "一站式了解分布式服务框架Dubbo细枝末节",
    "description": "Dubbo 是一个高效的分布式服务框架，采用服务注册、订阅和调用机制，实现服务的高性能通信。服务提供者在注册中心注册服务，消费者通过订阅获取并调用这些服务。Dubbo 支持多种通信协议和序列化协议，包括高效的 Hessian。框架具备负载均衡、集群容错和动态代理策略，保证系统稳定性和高可用性。Dubbo 的 SPI 机制支持插件化扩展，增加系统灵活性。服务治理功能包括服务降级、失败重试和超时重试，确保系统可靠性。对于分布式服务，还需考虑幂等性和请求顺序性，采用唯一标识和一致性哈希等方法来解决这些问题。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130191653",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20717,
    "commentCount": 425,
    "editUrl": "https://mp.csdn.net/console/editor/html/130191653",
    "postTime": "2023-04-17 07:50:45",
    "diggCount": 15,
    "formatTime": "2023.04.17",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/07f609026ae74d879c8ccacbaf791ca0.png"
    ],
    "collectCount": 15,
    "tags": [
      "dubbo",
      "mysql",
      "分布式",
      "后端",
      "中间件",
      "开源"
    ]
  },
  {
    "articleId": 130191640,
    "title": "Spring经典扩展接口应用：BeanFactoryPostProcessor",
    "description": "对BeanFactoryPostProcessor基本知识总结，并给出框架中的应用举例分析，再次给出扩展应用代码举例和一些建议，最后简单分析对应的源码分析",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130191640",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23247,
    "commentCount": 459,
    "editUrl": "https://mp.csdn.net/console/editor/html/130191640",
    "postTime": "2023-04-17 07:49:41",
    "diggCount": 19,
    "formatTime": "2023.04.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6b4b5e71d2b552ffad2498e1f7cc8bf5.png"
    ],
    "collectCount": 38,
    "tags": [
      "spring",
      "spring boot",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 130190804,
    "title": "Spring经典扩展接口应用：BeanPostProcessor",
    "description": "BeanPostProcessor 接口在 Spring 框架中的实际应用场景有很多，以下是一些举例:属性注入+AOP 预处理+定制初始化逻辑+数据校验+资源回收",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130190804",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 24956,
    "commentCount": 452,
    "editUrl": "https://mp.csdn.net/console/editor/html/130190804",
    "postTime": "2023-04-17 00:02:01",
    "diggCount": 16,
    "formatTime": "2023.04.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/fe3666560df657296e32e28621fc489d.png"
    ],
    "collectCount": 34,
    "tags": [
      "spring"
    ]
  },
  {
    "articleId": 130190129,
    "title": "Spring启动及Bean实例化过程来看经典扩展接口：灵活开发的必备利器",
    "description": "从Spring启动及Bean实例化过程来看经典扩展接口如下，并给出我们可能的应用分析：BeanPostProcessor+BeanFactoryPostProcessor+ApplicationContextAware++InitializingBean和DisposableBean+BeanDefinitionRegistryPostProcessor+ApplicationListener",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130190129",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21238,
    "commentCount": 406,
    "editUrl": "https://mp.csdn.net/console/editor/html/130190129",
    "postTime": "2023-04-16 23:16:16",
    "diggCount": 16,
    "formatTime": "2023.04.16",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/3e9858530dfefad10e2dd6890bc0b4eb.png"
    ],
    "collectCount": 24,
    "tags": [
      "spring",
      "spring boot",
      "后端",
      "java"
    ]
  },
  {
    "articleId": 130061624,
    "title": "离线任务平台在企业中的应用实例与解析思考",
    "description": "离线任务平台通常是指一种基于云计算或分布式计算技术，用于处理批量离线数据的计算平台。它可以自动化地执行一系列离线数据处理任务，如数据清洗、数据转换、数据分析、机器学习模型训练等。离线任务平台通常包括数据存储、数据处理和数据输出三个主要组件。在离线任务平台上，用户可以定义和配置数据处理任务，然后提交任务并等待任务完成。任务完成后，用户可以从输出目录中获取结果数据。在业务应用中，离线任务平台通常指一种数据处理平台，用于对大规模离线数据进行处理和分析，以便于业务决策和优化。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130061624",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21845,
    "commentCount": 410,
    "editUrl": "https://mp.csdn.net/console/editor/html/130061624",
    "postTime": "2023-04-10 15:34:37",
    "diggCount": 15,
    "formatTime": "2023.04.10",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/06d959d625b7e983369e4f1f772b6a65.png"
    ],
    "collectCount": 16,
    "tags": [
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 130061447,
    "title": "分析Spring事务管理原理及应用",
    "description": "通过配置已经大体知道了spring事务管理实现的原理就是AOP，不难推测，spring会提供实现事务管理相关功能的切面，切点和通知相关的类，来完成对于事务相关功能的支持。我们以配置最简单的注解式配置为例，分析其实现方式。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130061447",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21766,
    "commentCount": 462,
    "editUrl": "https://mp.csdn.net/console/editor/html/130061447",
    "postTime": "2023-04-10 15:32:40",
    "diggCount": 14,
    "formatTime": "2023.04.10",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/531bdc080cae2c8f21d9340e7b86271e.png"
    ],
    "collectCount": 17,
    "tags": [
      "后端",
      "spring",
      "spring boot"
    ]
  },
  {
    "articleId": 130037195,
    "title": "直击高频编程考点：队列知识及经典算法题总结",
    "description": "队列知识及编程练习总结：背景知识 +队列的应用（在Spring中的应用+在其他框架中的应用+在实际开发中的应用）+相关编程练习（用队列实现栈+使用栈实现队列+设计循环队列+滑动窗口最大值 +课程表+队列的最大值+用数组实现一个队列）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/130037195",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23608,
    "commentCount": 483,
    "editUrl": "https://mp.csdn.net/console/editor/html/130037195",
    "postTime": "2023-04-09 00:43:14",
    "diggCount": 15,
    "formatTime": "2023.04.09",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f1a2b5c237b4fc32c9eed671e1138f4b.png"
    ],
    "collectCount": 18,
    "tags": [
      "java",
      "数据结构",
      "leetcode"
    ]
  },
  {
    "articleId": 129901120,
    "title": "反本能---如何对抗你的习以为常",
    "description": "一、概述二、自我提升（一）我们为什么总想拖延（二）如何有效应对拖延（三）如何更好的自我控制（四）为啥付出了没有回报（五）如何提高学习效率三、群体接触，成为高情商（一）情商的五个维度（二）社交过程中的盲区（三）有效社交关系的建立（四）怎么才能好好说话（五）与他人相处的艺术（六）与情绪相处的艺术四、社会洞见，看到本质清晰表达（一）常见的决策陷阱（二）我们有哪些思维误区（三）表达的逻辑（四）看到事物的本质五、学习+改变的过程。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/129901120",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21452,
    "commentCount": 406,
    "editUrl": "https://mp.csdn.net/console/editor/html/129901120",
    "postTime": "2023-04-01 19:19:24",
    "diggCount": 14,
    "formatTime": "2023.04.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/af38ceec45c189c2604292c0cd2d070b.png"
    ],
    "collectCount": 15,
    "tags": [
      "学习"
    ]
  },
  {
    "articleId": 129899788,
    "title": "解锁内心的冲突：神经症冲突的理解与解决之道",
    "description": "神经症冲突概述-冲突的基本类型-未解决冲突的后果-尝试解决的途径-真正解决冲突",
    "url": "https://zyfcodes.blog.csdn.net/article/details/129899788",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20202,
    "commentCount": 482,
    "editUrl": "https://mp.csdn.net/console/editor/html/129899788",
    "postTime": "2023-04-01 18:35:13",
    "diggCount": 12,
    "formatTime": "2023.04.01",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/606a4355435ab62111368d1168b518c7.png"
    ],
    "collectCount": 12,
    "tags": [
      "学习"
    ]
  },
  {
    "articleId": 129701878,
    "title": "美团架构（技术+业务）简化与极致：O2O企业的技术进化与创新",
    "description": "美团的技术架构演变+美团业务架构优化+O2O 技术优化贯通的",
    "url": "https://zyfcodes.blog.csdn.net/article/details/129701878",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 27304,
    "commentCount": 468,
    "editUrl": "https://mp.csdn.net/console/editor/html/129701878",
    "postTime": "2023-03-22 08:48:37",
    "diggCount": 17,
    "formatTime": "2023.03.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/8edb7722884ea997cc72e3cf088be445.png"
    ],
    "collectCount": 53,
    "tags": [
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 129674941,
    "title": "通用线程池封装与异步化实践：提升小红书发现页的响应速度",
    "description": "实现异步通用线程池封装的同时，考虑了业务场景下的任务执行需求，提供了灵活的线程池配置和任务执行方式，并且对任务执行过程中的异常进行了处理和日志记录，整体设计合理。。在此基础上，结合小红书发现页业务逻辑来实现上面的设计。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/129674941",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22859,
    "commentCount": 459,
    "editUrl": "https://mp.csdn.net/console/editor/html/129674941",
    "postTime": "2023-03-20 20:07:48",
    "diggCount": 18,
    "formatTime": "2023.03.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b5ce69122e81780bfd29b0bcf995e140.png"
    ],
    "collectCount": 18,
    "tags": [
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 129626030,
    "title": "大规模分布式系统跟踪基础设施Dapper",
    "description": "论文《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》介绍了谷歌开发的大规模分布式系统跟踪基础设施Dapper。Dapper旨在通过提供跨多个服务和计算机的详细跟踪信息，帮助开发人员理解和调试复杂的分布式系统。论文讨论了Dapper背后的动机、其架构以及在诊断性能问题和优化分布式系统方面所提供的实际好处。本文作为回顾经典，重新学习，翻译的同时加入一些现有的理解。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/129626030",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22598,
    "commentCount": 508,
    "editUrl": "https://mp.csdn.net/console/editor/html/129626030",
    "postTime": "2023-03-17 18:19:30",
    "diggCount": 14,
    "formatTime": "2023.03.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/30f3323585c5c1fbe1830f1d75cffcea.png"
    ],
    "collectCount": 14,
    "tags": [
      "架构",
      "后端",
      "大数据"
    ]
  },
  {
    "articleId": 128145596,
    "title": "高效工作法则：学会思考，掌握五大管理工具",
    "description": "本文总结了五种常用的工作方法论：PDCA循环、RACI模型、RCA法则、SWOT分析法和SMART目标设定。通过介绍每种方法的核心概念和应用步骤，本文旨在帮助读者提升工作效率、明确责任、深入分析问题、制定合理目标，并优化工作流程。通过系统性地运用这些管理工具，个人和团队可以在工作中实现持续改进、有效沟通和精确决策，从而推动整体目标的达成。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/128145596",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 25590,
    "commentCount": 471,
    "editUrl": "https://mp.csdn.net/console/editor/html/128145596",
    "postTime": "2022-12-02 14:20:29",
    "diggCount": 14,
    "formatTime": "2022.12.02",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/ded1b65915fb4cd28f6ec3963cf50606.png"
    ],
    "collectCount": 22,
    "tags": [
      "学习",
      "职场和发展"
    ]
  },
  {
    "articleId": 127559918,
    "title": "TikTok变现玩法分析",
    "description": "TikTok变现玩法分析：从个人角而言，以及看到和前期简单尝试调研的结果来看，我更偏向于转战tiktok进行捞福利，因为国内的抖音已经进入了红海市场，变现的可能性有些太卷了，我自己是没有啥精力在用心通过这个搞外快的，但是就当前看到的情况来说，tiktok当前的蓝海市场我还是可以捞到一些油水的。而创建海外店铺通过国内货源进行跨境电商这些我还没开始弄，如果有已经开始玩的朋友请私信带带我，一起成长，谢谢！一下是自己的一些小总结，如果有经验的同学觉得不对的内容请进行指正一下，谢谢！",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127559918",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22337,
    "commentCount": 420,
    "editUrl": "https://mp.csdn.net/console/editor/html/127559918",
    "postTime": "2022-10-27 20:17:17",
    "diggCount": 15,
    "formatTime": "2022.10.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6f15f9b7700cadcdc0e25f7aed4a9415.png"
    ],
    "collectCount": 19,
    "tags": [
      "职场和发展",
      "业界资讯",
      "远程工作",
      "程序员创富",
      "创业创新",
      "学习方法"
    ]
  },
  {
    "articleId": 127559869,
    "title": "直击高频编程考点：散列表知识及经典算法题总结",
    "description": "哈希表相关知识及编程练习总结：背景知识+应用举例（Spring框架或其他框架中的应用举例+实际开发中的应用举例）+相关编程练习（无重复字符的最长子串+有效的数独+最小覆盖子串+字母异位词分组+有效的字母异位词+找到字符串中所有字母异位词+LRU缓存机制+多数元素+重复的DNA序列+快乐数+存在重复元素+存在重复元素+单词规律+前K个高频元素+字符串中的第一个唯一字符+四数相加 II+和为K的子数组+最常见的单词+同构字符串+两个数组的交集+两个数组的交集 II+分糖果+宝石与石头）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127559869",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21707,
    "commentCount": 504,
    "editUrl": "https://mp.csdn.net/console/editor/html/127559869",
    "postTime": "2022-10-27 20:14:39",
    "diggCount": 15,
    "formatTime": "2022.10.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/edcfd0a77f6cd54d1ada01bd18274407.png"
    ],
    "collectCount": 17,
    "tags": [
      "java",
      "算法",
      "数据结构",
      "哈希算法"
    ]
  },
  {
    "articleId": 127557224,
    "title": "直击高频编程考点：树相关知识及经典算法题总结",
    "description": "树相关知识及编程练习总结：背景知识+树的应用举例（Spring中的应用举例+其他框架中的应用举例+实际开发中的应用举例）+相关编程练习（二叉树遍历：包括前序遍历、中序遍历、后序遍历、层序遍历等+二叉树的最大深度+二叉树的最小深度+对称二叉树+二叉树的最近公共祖先+二叉树的直径+二叉树的路径和+二叉搜索树中的插入操作+二叉搜索树中的删除操作+二叉搜索树中的搜索操作+二叉树的层平均值+二叉树的镜像+二叉树的序列化与反序列化+二叉树的右视图+二叉树的最大宽度+前序遍历和中序遍历构造二叉树+平衡二叉树）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127557224",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21680,
    "commentCount": 451,
    "editUrl": "https://mp.csdn.net/console/editor/html/127557224",
    "postTime": "2022-10-27 17:34:55",
    "diggCount": 15,
    "formatTime": "2022.10.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/de60054c00fc74cdb6e2038a7e9b12e9.png"
    ],
    "collectCount": 17,
    "tags": [
      "b树",
      "决策树",
      "宽度优先",
      "广度优先",
      "深度优先"
    ]
  },
  {
    "articleId": 127557182,
    "title": "直击高频编程考点：排序算法知识及经典算法题总结",
    "description": "排序算法知识及编程练习总结：背景知识介绍+主流排序算法与应用+相关排序算法练习（冒泡排序+鸡尾酒排序+插入排序+选择排序+快速排序+归并排序+堆排序+Top K 问题分析+使用堆排序思想实现优先级队列+计数排序+桶排序+基数排序）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127557182",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23260,
    "commentCount": 469,
    "editUrl": "https://mp.csdn.net/console/editor/html/127557182",
    "postTime": "2022-10-27 17:32:48",
    "diggCount": 15,
    "formatTime": "2022.10.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c1c592ae84eb95d4efd2451340194ef2.gif"
    ],
    "collectCount": 21,
    "tags": [
      "java",
      "算法",
      "数据结构",
      "排序算法"
    ]
  },
  {
    "articleId": 127557152,
    "title": "直击高频编程考点：栈知识及经典算法题总结",
    "description": "栈与队列知识及编程练习总结：背景知识+栈的应用+相关编程练习（有效的括号+最小栈+每日温度+用栈实现队列+用队列实现栈+接雨水+逆波兰表达式求值+基本计算器+简化路径+岛屿数量+用数组实现一个栈+基本数学运算表达式求值+IP 范围判断）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127557152",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 20715,
    "commentCount": 534,
    "editUrl": "https://mp.csdn.net/console/editor/html/127557152",
    "postTime": "2022-10-27 17:31:32",
    "diggCount": 15,
    "formatTime": "2022.10.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/ce24ea21b1a3731c461d99208b071c1c.png"
    ],
    "collectCount": 16,
    "tags": [
      "java",
      "算法",
      "数据结构",
      "leetcode"
    ]
  },
  {
    "articleId": 127557093,
    "title": "直击高频编程考点：数组知识及经典算法题总结",
    "description": "数组基础、应用以及编程练习（找到数组 A 元素组成的小于 n的最大整数+两数之和 +三数之和 +最接近的三数之和+移动零 +旋转数组+搜索旋转排序数组 +寻找旋转排序数组中的最小值 +加一 +存在重复元素 +寻找数组的中心索引+翻转对 +只出现一次的数字+合并两个有序数组+合并区间+最大子序列+最长连续递增序列+最长公共前缀+移除元素+除自身以外数组乘积+颜色分类）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127557093",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23254,
    "commentCount": 396,
    "editUrl": "https://mp.csdn.net/console/editor/html/127557093",
    "postTime": "2022-10-27 17:29:32",
    "diggCount": 15,
    "formatTime": "2022.10.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6ba54c3670552243b536cd505569754f.png"
    ],
    "collectCount": 17,
    "tags": [
      "算法",
      "数据结构",
      "leetcode"
    ]
  },
  {
    "articleId": 127500756,
    "title": "直击高频编程考点：链表知识及经典算法题总结",
    "description": "了解链表结构，并在单链表或双链表中实现遍历、插入和删除以及分析在单链表或双链表中的各种操作的复杂度，同时附上相关面试考点的基本分类试题库（反转链表、链表中环的检测、链表中环的入口点、删除链表中倒数第K个节点、两个链表的第一个公共节点、链表的中间节点、合并两个有序链表、删除链表中的重复元素、排序链表、K 个一组翻转链表、旋转链表、分隔链表、奇偶链表、合并k个排序链表、链表相加、回文链表判定、回文链表重排、交换相邻节点、删除指定元素、反转链表指定部分、存在回文链表、链表最长递增子序列）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127500756",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23504,
    "commentCount": 512,
    "editUrl": "https://mp.csdn.net/console/editor/html/127500756",
    "postTime": "2022-10-24 20:33:51",
    "diggCount": 16,
    "formatTime": "2022.10.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5ed3a603f79ae2ed5279797fd68941a5.png"
    ],
    "collectCount": 27,
    "tags": [
      "java",
      "算法",
      "数据结构",
      "链表"
    ]
  },
  {
    "articleId": 127499927,
    "title": "基于Hive的智能化业务圈选系统搭建与优化",
    "description": "本文介绍了如何搭建一个高效的业务圈选系统，旨在解决传统数据处理过程中遇到的痛点。随着企业业务的不断发展，传统的ETL流程已难以满足多场景数据处理的需求，因此搭建一个能够自动化筛选数据并执行特定业务流程的系统变得尤为重要。文章详细分析了系统背景、数据表设计、ETL优化、以及如何将多表数据整合成基础表以提高查询效率。同时，本文还探讨了如何通过泛化调用和抽象设计提升代码的复用性与灵活性。最后，文章强调了系统建设的持续优化与迭代过程，以确保在不断变化的业务需求面前系统能够高效、灵活地运行。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127499927",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23211,
    "commentCount": 440,
    "editUrl": "https://mp.csdn.net/console/editor/html/127499927",
    "postTime": "2022-10-24 20:04:36",
    "diggCount": 14,
    "formatTime": "2022.10.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7705d9d7d059bca13e5b230e767eab2e.png"
    ],
    "collectCount": 15,
    "tags": [
      "架构",
      "后端",
      "大数据"
    ]
  },
  {
    "articleId": 127499647,
    "title": "从需求到上线：如何打造一个完整的业务审核系统",
    "description": "随着业务的不断演变，其实我们会生产出众多的业务系统，这些系统会为对应的业务形态进行赋能工作，赋能后相关系统会开放给运营人员根据业务需要进行线上的实际操作，但是往往会因为运营相关人员在配置上的误操作会给相关业务线或相关功能模块带来一定的线上事故和损失。为了避免类似这样事件的发生，个人认为是需要在内部搭建一套业务审核系统的，该系统主要针对业务实际上线生效前通知相关的业务同学协助进行复查和确认，对任意线上的操作都能有一层基本的保障处理。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/127499647",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22524,
    "commentCount": 415,
    "editUrl": "https://mp.csdn.net/console/editor/html/127499647",
    "postTime": "2022-10-24 19:49:57",
    "diggCount": 16,
    "formatTime": "2022.10.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/cef0830174f76ac12bfe170afff0976f.png"
    ],
    "collectCount": 21,
    "tags": [
      "架构",
      "后端",
      "软件工程"
    ]
  },
  {
    "articleId": 124414624,
    "title": "超越并发瓶颈：CAS与乐观锁的智慧应用",
    "description": "synchronized 是 Java 内置的同步机制，依赖 JVM 实现，通过进入和退出监视器锁（Monitor Lock）来保证线程的安全性。在高并发情况下，线程可能会频繁地在 BLOCKED 状态和 RUNNABLE 状态之间切换，导致用户态和内核态的频繁切换，从而影响性能。CAS和乐观锁作为两种重要的并发控制机制备受关注。CAS机制直接利用硬件保证原子性，而乐观锁则基于乐观的思想进行并发控制。本文将学习这两种机制的原理、应用及性能特点来进行体会",
    "url": "https://zyfcodes.blog.csdn.net/article/details/124414624",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 24089,
    "commentCount": 451,
    "editUrl": "https://mp.csdn.net/console/editor/html/124414624",
    "postTime": "2022-04-25 21:18:46",
    "diggCount": 17,
    "formatTime": "2022.04.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5961e1d502ac95b91dd9f7780fd18ff5.png"
    ],
    "collectCount": 18,
    "tags": [
      "java",
      "开发语言",
      "后端"
    ]
  },
  {
    "articleId": 123956717,
    "title": "深入责任链模式：案例解读及管道模式延伸",
    "description": "责任链在实际开发中的应用还是比较多的，特别是在营销订购系统、审核流转换处理、任务流程处理系统等系统中，其实我们在开发中往往主要应用的主要无非是以下三个场景（起码以我的平时开发的角度来看）：一是无需太关心责任链中各处理流的顺序的简单使用；二是需要关注处理顺序，按责任链条延续处理，每个处理节点均可对请求进行节点的处理， 或将其传递给链上的下个处理节点；三是在处理中和纯的责任链模式在链上只会有一个处理器用于处理业务数据存在差异，需要进行管道模式采用多个处理器都会处理业务数据。针对以上场景进行业务举例和代码书写",
    "url": "https://zyfcodes.blog.csdn.net/article/details/123956717",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21099,
    "commentCount": 451,
    "editUrl": "https://mp.csdn.net/console/editor/html/123956717",
    "postTime": "2022-04-04 19:25:16",
    "diggCount": 28,
    "formatTime": "2022.04.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f38fc2676fcea395f5cee86b5cc602d6.png"
    ],
    "collectCount": 61,
    "tags": [
      "java",
      "spring",
      "责任链模式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 123619576,
    "title": "提升代码复用与可维护性：模版模式的应用实例分析",
    "description": "模版模式应该是工作中最常用的设计模式之一，直白的讲就是如果的一些处理方式是有一定的模版流程处理的，那么在应用中使用该模式在合适不过了。对于其基本的业务应用，我简单写了以下三个基本的通用模版（业务失败重试机制、业务前置检查流程模版、Thrift远程调用处理模版）来展示，有问题的可以留言纠正，谢谢！",
    "url": "https://zyfcodes.blog.csdn.net/article/details/123619576",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21635,
    "commentCount": 476,
    "editUrl": "https://mp.csdn.net/console/editor/html/123619576",
    "postTime": "2022-03-20 22:03:40",
    "diggCount": 22,
    "formatTime": "2022.03.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/117c3c6172faa141665e91efe3826f73.png"
    ],
    "collectCount": 30,
    "tags": [
      "java",
      "模板方法模式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 123294732,
    "title": "注解驱动的策略模式实现：简化复杂业务逻辑",
    "description": "本文介绍了如何通过注解实现策略模式，旨在简化和优化传统策略模式的实现过程。通过三个不同的业务场景，从简单到复杂的注解方式展示了如何灵活地应用策略，避免了大量的工厂模式和策略类。文章首先介绍了基本的注解定义和策略实现方法，接着演示了如何组合注解进行复杂策略的实现，最后探讨了如何利用注解优化策略模式的扩展性和维护性。通过本文的学习，开发者可以更加高效、优雅地实现动态策略选择，提升项目的可维护性和灵活性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/123294732",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21737,
    "commentCount": 446,
    "editUrl": "https://mp.csdn.net/console/editor/html/123294732",
    "postTime": "2022-03-05 15:07:53",
    "diggCount": 25,
    "formatTime": "2022.03.05",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/49cbf3bd3e38961b899ce643303d1a47.png"
    ],
    "collectCount": 48,
    "tags": [
      "策略模式",
      "java",
      "后端",
      "算法",
      "解释器模式"
    ]
  },
  {
    "articleId": 123063356,
    "title": "从基础到快速实践：Elasticsearch的应用与操作指南",
    "description": "本文介绍了 Elasticsearch（ES）及其在 Java 环境中的应用，重点讲解了 Elasticsearch 的基本原理、数据模型和常见操作。通过具体的 Spring Boot 示例，展示了如何将 Elasticsearch 集成到 Java 项目中，实现高效的数据存储、索引与检索。文章还涵盖了如何使用 Elasticsearch 进行文档管理、复杂查询和数据分析，帮助开发者提升系统的搜索性能与可扩展性。通过学习本文，读者将能够更好地理解和应用 Elasticsearch，优化项目中的数据处理和搜索",
    "url": "https://zyfcodes.blog.csdn.net/article/details/123063356",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23666,
    "commentCount": 439,
    "editUrl": "https://mp.csdn.net/console/editor/html/123063356",
    "postTime": "2022-02-22 11:01:15",
    "diggCount": 19,
    "formatTime": "2022.02.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9ae13ea87942c2e082c79ce812b5fb3e.png"
    ],
    "collectCount": 19,
    "tags": [
      "elasticsearch",
      "学习",
      "大数据"
    ]
  },
  {
    "articleId": 121396875,
    "title": "表态投票：让你的文章得到更真实的读者反馈",
    "description": "在内容创作的过程中，了解读者的真实反馈对于提高文章质量和提升读者体验至关重要。表态投票机制作为一种有效的反馈收集工具，能够帮助创作者实时掌握读者对内容的态度和意见。这种机制通过设置不同的投票选项，使读者能够对文章的各个方面进行评分或选择，从而提供精准的数据支持。本文探讨了表态投票机制的设计原则、实施方法以及在实际应用中的优势。重点分析了如何通过合理设置投票选项来引导读者表达真实意见，以及如何利用收集到的数据进行内容优化。通过案例研究，文章还展示了表态投票机制在提升内容互动性和满意度方面的实际效果。综上所述，",
    "url": "https://zyfcodes.blog.csdn.net/article/details/121396875",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22124,
    "commentCount": 508,
    "editUrl": "https://mp.csdn.net/console/editor/html/121396875",
    "postTime": "2021-11-18 11:26:04",
    "diggCount": 15,
    "formatTime": "2021.11.18",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/dbf720d299ee4014a26a1845e42c23f8.png"
    ],
    "collectCount": 17,
    "tags": [
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 118000193,
    "title": "从连接到存储：解析MySQL查询请求的执行流程",
    "description": "MYSQL服务器程序在处理来自客户端查询请求时，大致需要处理流程可以分为三个部分：连接管理、解析与优化、存储引擎。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/118000193",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22993,
    "commentCount": 477,
    "editUrl": "https://mp.csdn.net/console/editor/html/118000193",
    "postTime": "2021-06-17 19:37:41",
    "diggCount": 14,
    "formatTime": "2021.06.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/43bbe6f5ba9ebb52c308ae85adfcbe35.png"
    ],
    "collectCount": 25,
    "tags": [
      "mysql",
      "服务器",
      "数据库"
    ]
  },
  {
    "articleId": 117075767,
    "title": "散列函数的安全与应用：自问自答详解",
    "description": "本文深入探讨了散列技术及其在信息安全中的应用。首先介绍了散列函数的基本概念和常见算法（如MD5、SHA-1、SHA-2、SHA-3）的特点，分析了它们在不同场景下的适用性。接着，讨论了散列函数的安全性问题，重点阐述了如何防止散列冲突、哈希碰撞和彩虹表攻击等常见风险，并提出了加盐和使用安全算法等防护措施。此外，本文还介绍了散列技术在密码存储、数据完整性校验、数字签名等方面的实际应用，并讨论了如何选择合适的散列算法及参数。最后，文章总结了散列技术在现代信息安全系统中的重要性，并强调了在安全性与效率之间的平衡。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/117075767",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 21898,
    "commentCount": 466,
    "editUrl": "https://mp.csdn.net/console/editor/html/117075767",
    "postTime": "2021-05-20 14:45:00",
    "diggCount": 15,
    "formatTime": "2021.05.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/be9e5ed0cb4a076de95a1d0da80384b2.png"
    ],
    "collectCount": 18,
    "tags": [
      "java",
      "散列表",
      "后端"
    ]
  },
  {
    "articleId": 116803687,
    "title": "EXPLAIN分析：如何让你的SQL查询更高效？",
    "description": "本文介绍了如何使用 EXPLAIN 命令分析 SQL 查询的执行计划，帮助开发者识别查询中的性能瓶颈。文章首先讲解了 EXPLAIN 的基本使用方法，接着详细分析了其返回字段的含义，如读取顺序、索引使用情况、查询成本等。随后，本文探讨了索引优化的原则和常见失效情况，并给出了通过 EXPLAIN 优化 SQL 查询的基本思路。最后，文章补充了查询优化中的成本分析，强调了 I/O 成本和 CPU 成本的影响。整体而言，本文为提高 SQL 查询性能提供了实用的分析工具和优化策略。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/116803687",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23250,
    "commentCount": 481,
    "editUrl": "https://mp.csdn.net/console/editor/html/116803687",
    "postTime": "2021-05-14 19:50:23",
    "diggCount": 20,
    "formatTime": "2021.05.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e04e200ea735d060f290e14b2fee3033.png"
    ],
    "collectCount": 40,
    "tags": [
      "sql",
      "数据库",
      "mysql"
    ]
  },
  {
    "articleId": 107635951,
    "title": "日常开发Guava提效工具库核心实用指南梳理",
    "description": "主要针对平时开发中最常用的guava操作做基本的操作总结，并不完善，只整理平时使用较多的地方！",
    "url": "https://zyfcodes.blog.csdn.net/article/details/107635951",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22781,
    "commentCount": 505,
    "editUrl": "https://mp.csdn.net/console/editor/html/107635951",
    "postTime": "2020-07-28 14:51:35",
    "diggCount": 19,
    "formatTime": "2020.07.28",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/6a55c04630be456aae5bdc20c7563457.png"
    ],
    "collectCount": 23,
    "tags": [
      "guava",
      "java",
      "后端",
      "分布式",
      "算法"
    ]
  },
  {
    "articleId": 106943391,
    "title": "深入解析工厂模式与策略模式的结合：从外卖平台折扣谈起",
    "description": "其实在很多的开发设计中，将工厂模式和策略模式的综合使用的案例是很多的，而且解决的实际问题也一样很多，本次对基本的简单工厂模式和策略模式做简单介绍，重点放在两者结合后的具体应用上做分析和讲解。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106943391",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 29223,
    "commentCount": 475,
    "editUrl": "https://mp.csdn.net/console/editor/html/106943391",
    "postTime": "2020-06-24 14:34:37",
    "diggCount": 46,
    "formatTime": "2020.06.24",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d183d89f961e14ee40f2b60af8b7d8cb.png"
    ],
    "collectCount": 174,
    "tags": [
      "策略模式",
      "java",
      "开发语言",
      "后端"
    ]
  },
  {
    "articleId": 106091174,
    "title": "数据库记录行在页内查询探索分析",
    "description": "索引与记录行的管理是提高查询效率和数据存储优化的核心，本次我们讨论一下索引页与记录行之间的关系，并解析数据行内部单向链表的形成过程和记录行在页内的高效查找策略。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106091174",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1672835,
    "commentCount": 407,
    "editUrl": "https://mp.csdn.net/console/editor/html/106091174",
    "postTime": "2020-05-13 09:51:44",
    "diggCount": 18,
    "formatTime": "2020.05.13",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b292e40807a9b9328396faf41a292cd9.png"
    ],
    "collectCount": 15,
    "tags": [
      "数据库",
      "mysql",
      "后端"
    ]
  },
  {
    "articleId": 106086563,
    "title": "深入理解Tair：阿里巴巴的分布式存储解决方案",
    "description": "本文对Tair数据库进行了深入剖析，重点介绍了其架构设计、核心功能和应用场景。Tair作为阿里巴巴自主研发的分布式缓存系统，凭借高性能、灵活的存储模式以及强大的可扩展性，广泛应用于大规模分布式系统中。文章详细讲解了Tair如何实现数据高可用性、容灾恢复及多数据结构支持，同时分析了其在性能、可扩展性及一致性方面的优势与不足。最后，文章强调，尽管Tair具有诸多优点，但在复杂事务处理和特定场景下仍存在一定的优化空间，选择使用时需要根据具体需求权衡利弊。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106086563",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1650791,
    "commentCount": 442,
    "editUrl": "https://mp.csdn.net/console/editor/html/106086563",
    "postTime": "2020-05-12 22:22:55",
    "diggCount": 22,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5796896266ede4f3a84ef1a09ef35817.png"
    ],
    "collectCount": 24,
    "tags": [
      "redis",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 106086455,
    "title": "掌握Spring AOP：开发中的切面编程与案例分析",
    "description": "本文介绍了 Spring AOP（面向切面编程） 的基本理论和实际应用。首先，详细解释了 AOP 中的关键概念，如连接点、切点、通知等，并通过切点表达式和正则规则的使用，展示了如何在不同场景下灵活应用 AOP。接着，结合多个实际开发案例，讲解了如何使用 AOP 实现方法自动打印、mock 赋能干预、业务处理和异步操作等功能。最后，文章总结了 AOP 的开发注意事项及最佳实践，帮助开发者避免常见的陷阱并提高代码的可维护性和扩展性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106086455",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1650549,
    "commentCount": 413,
    "editUrl": "https://mp.csdn.net/console/editor/html/106086455",
    "postTime": "2020-05-12 22:14:53",
    "diggCount": 21,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9288f198fa216a6134d29fdf2be5ccd6.png"
    ],
    "collectCount": 27,
    "tags": [
      "spring boot",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 106086200,
    "title": "直击高频编程考点：数学思维知识及经典算法题总结：",
    "description": "数学思维考察练习（众数+快乐数+丑数+回文数+计数质数+有效数字+整数反转+罗马数字+平方根+超级次方+整数拆分+阶乘后的零+复数乘法+两数加法除法+最大公约数和最小公倍数+二进制中1的个数+从1到n整数中1出现的次数+求1+2+3+···+n数字之和等）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106086200",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1654286,
    "commentCount": 436,
    "editUrl": "https://mp.csdn.net/console/editor/html/106086200",
    "postTime": "2020-05-12 22:05:24",
    "diggCount": 24,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/71dd6733ff1f9021fc61d414878bf893.png"
    ],
    "collectCount": 33,
    "tags": [
      "算法",
      "数学建模"
    ]
  },
  {
    "articleId": 106086035,
    "title": "直击高频编程考点：图论总结及经典算法题总结",
    "description": "图论基本分析以及相关编程练习加深练习（单词接龙、克隆图、岛屿数量、网络延迟时间、单源最短路径、负权最短路径问题、具有最小生成树的连通图的最小代价、找到最终的安全状态、网络流问题的最大流、图中的可变流量、图中的割边、隐藏的好友、欧拉路径、哈密顿路径、判断是否为二分图、用颜色填充区域等）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106086035",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1655191,
    "commentCount": 503,
    "editUrl": "https://mp.csdn.net/console/editor/html/106086035",
    "postTime": "2020-05-12 21:57:40",
    "diggCount": 22,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d13fe5cd48bd1c1f55afc64b60ff87ee.png"
    ],
    "collectCount": 32,
    "tags": [
      "java",
      "图论",
      "数据结构"
    ]
  },
  {
    "articleId": 106081590,
    "title": "高效内存管理与性能优化：Java Hotspot G1 GC全景解析",
    "description": "本文深入分析了 Java Hotspot G1 GC 的工作原理、特点以及优化策略。G1 GC 是一种为低延迟和高吞吐量设计的垃圾回收器，适用于大内存和高响应要求的应用。文章详细介绍了 G1 GC 的基本回收流程、各类垃圾回收策略，以及如何通过调优 JVM 参数来优化垃圾回收过程。通过监控工具和 GC 日志分析，开发者可以精准调整 G1 GC 的行为，提升应用的性能和响应速度。参考文献、书籍及链接1.https://tech.meituan.com/2016/09/23/g1.html2.书",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106081590",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1662841,
    "commentCount": 437,
    "editUrl": "https://mp.csdn.net/console/editor/html/106081590",
    "postTime": "2020-05-12 17:52:29",
    "diggCount": 27,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/56320dd481902d96814ec9647a842828.png"
    ],
    "collectCount": 34,
    "tags": [
      "java",
      "jvm",
      "后端"
    ]
  },
  {
    "articleId": 106081236,
    "title": "锁的艺术：Java并发中的常用锁策略与实践",
    "description": "对java锁相关内容进行整理分析：乐观锁 VS 悲观锁+自旋锁 VS 适应性自旋锁+无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁+公平锁 VS 非公平锁+可重入锁 VS 非可重入锁+独享锁 VS 共享锁",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106081236",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1667659,
    "commentCount": 486,
    "editUrl": "https://mp.csdn.net/console/editor/html/106081236",
    "postTime": "2020-05-12 17:36:44",
    "diggCount": 24,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9eefba1ab0505575d4df432c8053d5ef.png"
    ],
    "collectCount": 108,
    "tags": [
      "java",
      "后端"
    ]
  },
  {
    "articleId": 106081077,
    "title": "从ReentrantLock理解AQS的原理及应用总结",
    "description": "本文介绍了Java中的AbstractQueuedSynchronizer（AQS），重点讲解了其在实现ReentrantLock等同步器中的应用。文章分析了AQS的基本概念、工作原理及关键数据结构，并探讨了其在多线程竞争中的线程排队与唤醒机制。通过对AQS实现的深入剖析，帮助开发者更好地理解并发编程中的锁机制和自定义同步器的实现。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106081077",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1670673,
    "commentCount": 417,
    "editUrl": "https://mp.csdn.net/console/editor/html/106081077",
    "postTime": "2020-05-12 17:30:44",
    "diggCount": 27,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8772557250af92c0746e933678b2808d.png"
    ],
    "collectCount": 96,
    "tags": [
      "spring",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 106080861,
    "title": "Java线程池ThreadPoolExecutor背后的秘密与实践",
    "description": "本文深入分析了Java线程池ThreadPoolExecutor的工作原理、核心参数以及配置策略。通过详细讲解线程池的创建、任务调度和线程管理机制，帮助开发者理解如何高效使用线程池来处理并发任务。文章还探讨了常见的性能瓶颈和优化方法，如合理配置线程池参数、选择适当的拒绝策略等，旨在提升应用的并发处理能力和稳定性。最终，读者将能够根据不同场景灵活调整线程池配置，从而有效提升系统性能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106080861",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669009,
    "commentCount": 469,
    "editUrl": "https://mp.csdn.net/console/editor/html/106080861",
    "postTime": "2020-05-12 17:24:37",
    "diggCount": 22,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e58682f29045bef7b3efca49af96a342.png"
    ],
    "collectCount": 37,
    "tags": [
      "java",
      "spring",
      "后端"
    ]
  },
  {
    "articleId": 106080490,
    "title": "Java阻塞队列解析：挑战并发编程中的瓶颈",
    "description": "本文介绍了Java中的阻塞队列（BlockingQueue），重点讲解了其基本概念、常见实现及应用场景。通过分析生产者-消费者问题的解决方案，帮助开发者理解如何利用阻塞队列优化并发编程，提高系统效率与稳定性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106080490",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669929,
    "commentCount": 497,
    "editUrl": "https://mp.csdn.net/console/editor/html/106080490",
    "postTime": "2020-05-12 17:10:39",
    "diggCount": 22,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/71a4741d736f751e5b27f07ffb76122b.png"
    ],
    "collectCount": 22,
    "tags": [
      "java",
      "spring",
      "后端"
    ]
  },
  {
    "articleId": 106080394,
    "title": "红黑树精通指南：面试、实战与源码分析",
    "description": "本文深入探讨了红黑树的基本原理、实现方法及其在实际应用中的重要性。红黑树是一种自平衡的二叉搜索树，通过一系列颜色标记和旋转操作保证了查找、插入和删除操作的时间复杂度始终保持在 O(log n) 级别。文章首先介绍了红黑树的关键性质和与 AVL 树的区别，分析了红黑树在数据库索引、内存管理等领域的应用。接着，详细讲解了红黑树的插入和删除操作，以及如何通过旋转和颜色调整保持树的平衡。最后，文章通过源码分析展示了红黑树在 Java 和 Linux 内核中的实现，帮助读者更好地理解这一数据结构的实际应用和开发过程。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106080394",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1723263,
    "commentCount": 453,
    "editUrl": "https://mp.csdn.net/console/editor/html/106080394",
    "postTime": "2020-05-12 17:06:50",
    "diggCount": 342,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6b1e97bd9ee41e5fe7b7d53b291cba33.png"
    ],
    "collectCount": 1985,
    "tags": [
      "b树",
      "数据结构",
      "算法"
    ]
  },
  {
    "articleId": 106080301,
    "title": "告别NullPointerException！Optional深入实战与源码揭秘",
    "description": "Java 8 引入的新特性Optional类，主要解决空指针异常（NullPointerException）问题。从实际使用来看，Optional对多层判空嵌套有奇效，但如果只是简单的单层判空，确实没有必要去引入Optional。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106080301",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 23985,
    "commentCount": 370,
    "editUrl": "https://mp.csdn.net/console/editor/html/106080301",
    "postTime": "2020-05-12 17:03:32",
    "diggCount": 17,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e6cc822853b6c5cefb78aa36b46dec88.png"
    ],
    "collectCount": 26,
    "tags": [
      "java",
      "jvm",
      "后端"
    ]
  },
  {
    "articleId": 106080206,
    "title": "高并发场景下的缓存穿透问题探析与应对策略",
    "description": "本文探讨在高并发场景下，缓存穿透问题对系统稳定性和性能的威胁。缓存穿透是指恶意请求或不存在的数据频繁穿透缓存直达数据库，严重影响系统的效率和资源利用率。为了有效应对这一挑战，文章详细介绍了三种主要的解决策略：缓存空结果、参数合法性校验和布隆过滤器的应用。每种策略都包括了具体的实施方法和技术实现，以及其在提升系统性能方面的优势和局限性。通过本文的阐述，读者将能够深入理解缓存穿透问题的本质及其解决方案，为设计和优化高并发系统提供实用的指导和技术支持。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106080206",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1672634,
    "commentCount": 469,
    "editUrl": "https://mp.csdn.net/console/editor/html/106080206",
    "postTime": "2020-05-12 17:00:12",
    "diggCount": 19,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/646dd5fca7081010a6025b4a66ae9d89.png"
    ],
    "collectCount": 16,
    "tags": [
      "设计模式",
      "redis",
      "分布式"
    ]
  },
  {
    "articleId": 106080007,
    "title": "状态模式全解析：理论、实现与实际案例深度剖析",
    "description": "本文以电商订单管理为例，深入探讨了状态模式及其变种管道模式的应用。通过剖析状态与行为分离的核心思想，展示了如何在复杂状态切换场景中实现清晰且可扩展的代码设计。文章不仅详细讲解了实现步骤，还分享了实际业务中的应用经验，为开发者提供了解决复杂逻辑的新思路。设计模式的精髓在于灵活应用，状态模式无疑是提升代码质量的有力工具。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106080007",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1672108,
    "commentCount": 435,
    "editUrl": "https://mp.csdn.net/console/editor/html/106080007",
    "postTime": "2020-05-12 16:54:14",
    "diggCount": 22,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c1f943122e2ac53a8b8285abacc2991f.png"
    ],
    "collectCount": 21,
    "tags": [
      "状态模式",
      "后端",
      "spring",
      "java"
    ]
  },
  {
    "articleId": 106079740,
    "title": "克隆对象的艺术：原型模式与深浅拷贝的完美结合",
    "description": "本文介绍了原型模式的基本概念、实现方式以及在实际开发中的应用。原型模式通过复制一个已有的原型对象来创建新对象，避免了繁琐的实例化过程，提高了对象创建的效率。文章详细讲解了实现原型模式所需的条件，包括实现Cloneable接口和重写clone方法，并通过员工类示例展示了如何在Java中实现该模式。文章还讨论了浅拷贝与深拷贝的区别，分析了浅拷贝带来的潜在问题，并给出了通过深拷贝解决问题的方案。最后，文章探讨了原型模式的应用场景，强调了它在复杂对象创建和系统解耦中的重要作用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/106079740",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669526,
    "commentCount": 487,
    "editUrl": "https://mp.csdn.net/console/editor/html/106079740",
    "postTime": "2020-05-12 16:46:00",
    "diggCount": 24,
    "formatTime": "2020.05.12",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/81fa4822260a35335e65435a8e267d2d.png"
    ],
    "collectCount": 32,
    "tags": [
      "原型模式",
      "java",
      "开发语言",
      "后端"
    ]
  },
  {
    "articleId": 105652399,
    "title": "单例模式深度剖析：各种实现方式的优缺点对比",
    "description": "单例模式是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。实现方式介绍分析：饿汉式单例模式+懒汉式单例模式（双重检查锁）+静态内部类实现单例模式+注册式单例模式",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105652399",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1696069,
    "commentCount": 398,
    "editUrl": "https://mp.csdn.net/console/editor/html/105652399",
    "postTime": "2020-04-21 11:15:59",
    "diggCount": 44,
    "formatTime": "2020.04.21",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7ad7102a333dee34e59ee10962aee057.png"
    ],
    "collectCount": 147,
    "tags": [
      "单例模式",
      "后端",
      "java"
    ]
  },
  {
    "articleId": 105640313,
    "title": "直击高频编程考点：：动态规划经典算法题总结",
    "description": "动态规划基本理解分析以及应用举例，同时给出高频笔试考题解法分析和代码展示验证（最大子序和、最长上升子序列、最长公共子序列、最大子数组乘积、分割整数的最大乘积、最长有效括号、不同路径、最小路径和、最大矩形、0-1背包问题、编辑距离、单词拆分、爬楼梯、打家劫舍、强盗抢劫环形街区、股票买卖问题、最佳买卖股票时机含冷冻期、找零钱的最少硬币数、从起点到终点的最小路径数等）",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105640313",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 17495,
    "commentCount": 504,
    "editUrl": "https://mp.csdn.net/console/editor/html/105640313",
    "postTime": "2020-04-20 17:34:58",
    "diggCount": 14,
    "formatTime": "2020.04.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b980bc0dd9c84232ecdc3ea6fc41c147.png"
    ],
    "collectCount": 24,
    "tags": [
      "动态规划",
      "算法"
    ]
  },
  {
    "articleId": 105637394,
    "title": "生日悖论理论及在哈希函数碰撞中的应用",
    "description": "生日悖论揭示了在一个相对较小的群体中，至少有两人生日相同的概率远高于预期。本文探讨了生日悖论在计算机科学中的应用，特别是在哈希函数碰撞问题上的重要性。哈希函数将输入映射到固定大小的输出，而生日悖论的概念帮助我们理解即使在输出空间远小于输入空间时，碰撞的概率也显著增加。文章强调了在数字签名和数据完整性验证中避免碰撞的重要性，并提出了采用强抗碰撞能力的哈希算法和定期更新安全措施来保护信息安全的建议。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105637394",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 30488,
    "commentCount": 421,
    "editUrl": "https://mp.csdn.net/console/editor/html/105637394",
    "postTime": "2020-04-20 16:44:00",
    "diggCount": 14,
    "formatTime": "2020.04.20",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/15a6a2cefa3c417c9cf941de69369d8f.png"
    ],
    "collectCount": 13,
    "tags": [
      "算法",
      "动态规划"
    ]
  },
  {
    "articleId": 105633821,
    "title": "Redis Cluster：从数据分布到故障转移的全方位解读",
    "description": "本文深入探讨了Redis Cluster的核心原理与实现，涵盖了数据分布、节点通信、集群伸缩、请求路由、故障转移及运维管理等多个方面。文章首先介绍了Redis Cluster的三种数据分布方案，重点分析了虚拟槽分区方案的优势。随后，详细解析了节点间的Gossip消息通信机制以及请求路由原理，帮助读者理解集群的高效运作。对于集群的扩容与缩容，本文提供了操作步骤与注意事项，特别关注了故障转移机制与集群运维中的挑战。通过这些内容，读者可以更好地掌握Redis Cluster的架构与实践，提升分布式系统的性能与可靠",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105633821",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1741778,
    "commentCount": 481,
    "editUrl": "https://mp.csdn.net/console/editor/html/105633821",
    "postTime": "2020-04-20 14:14:37",
    "diggCount": 532,
    "formatTime": "2020.04.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/68adc99fd408a8c62e512950bab78284.png"
    ],
    "collectCount": 2688,
    "tags": [
      "redis",
      "运维",
      "后端"
    ]
  },
  {
    "articleId": 105631666,
    "title": "SpringBoot 启动加速：优化与定制化干预技术解析",
    "description": "给出SpringBoot启动配置原理详解分析，并介绍Spring Boot启动过程中可以实现的干预工作，最后给出如何缩短SpringBoot项目的启动时间",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105631666",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1736463,
    "commentCount": 422,
    "editUrl": "https://mp.csdn.net/console/editor/html/105631666",
    "postTime": "2020-04-20 13:54:07",
    "diggCount": 175,
    "formatTime": "2020.04.20",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f5bac517cfa0d952f4c46e990c49fb8e.png"
    ],
    "collectCount": 831,
    "tags": [
      "java",
      "spring",
      "spring boot"
    ]
  },
  {
    "articleId": 105608235,
    "title": "精通装饰器模式：实现灵活商品定价策略的最佳实践",
    "description": "本文系统性地介绍了装饰器模式，从基本概念到实际应用，逐步展开。首先，阐述了装饰器模式的定义和功能，配合结构图和具体实例进行说明。接着，深入探讨了装饰器模式的基本用法，包括接口定义、具体对象初始化、装饰类设计以及其他具体装饰类的实现。在实际案例分析部分，我们通过构建一套商品价格策略优化方案，展示了装饰器模式的强大灵活性。案例步骤包括订单和商品属性类的建立、计算支付金额的接口和基本类设计、优惠券和红包计算类的实现，以及工厂类的组合应用。最后，通过实际操作演示，为读者提供了详实的学习参考和实践指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105608235",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1700635,
    "commentCount": 447,
    "editUrl": "https://mp.csdn.net/console/editor/html/105608235",
    "postTime": "2020-04-19 12:36:44",
    "diggCount": 51,
    "formatTime": "2020.04.19",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/76f33ecaa2bb51989ae1c677adc6a502.png"
    ],
    "collectCount": 184,
    "tags": [
      "装饰器模式",
      "后端",
      "java"
    ]
  },
  {
    "articleId": 105361100,
    "title": "相关业务问题+系统问题+设计问题整理统计",
    "description": "业务系统及其他相关面试问题整理：线上相关问题排查+高并发系统的限流+高并发秒杀系统设计+负载均衡+一个网站有 20 亿 url 存在一个黑名单中，这个黑名单要怎么存？若此时随便输入一个 url，你如何快速判断该 url 是否在这个黑名单中？并且需在给定内存空间（比如：500M）内快速判断出？",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105361100",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1689392,
    "commentCount": 490,
    "editUrl": "https://mp.csdn.net/console/editor/html/105361100",
    "postTime": "2020-04-07 11:51:11",
    "diggCount": 23,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9a46197dbb9ee703dc44bbab9d0d927f.png"
    ],
    "collectCount": 67,
    "tags": [
      "java",
      "数据库",
      "开发语言"
    ]
  },
  {
    "articleId": 105361083,
    "title": "消息中间件高频面试题整理（RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、MetaMQ）",
    "description": "消息中间件基本问题整理分析",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105361083",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1693295,
    "commentCount": 1655,
    "editUrl": "https://mp.csdn.net/console/editor/html/105361083",
    "postTime": "2020-04-07 11:50:15",
    "diggCount": 35,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/d6a04a69dc404ca8da3421f8cb8a52bd.png"
    ],
    "collectCount": 183,
    "tags": [
      "中间件",
      "kafka",
      "面试"
    ]
  },
  {
    "articleId": 105361059,
    "title": "网络协议与编程IO相关面试问题整理",
    "description": "HTTP一些基本问题的整理",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105361059",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1692754,
    "commentCount": 457,
    "editUrl": "https://mp.csdn.net/console/editor/html/105361059",
    "postTime": "2020-04-07 11:49:24",
    "diggCount": 20,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7fbe8d7efcf42da672bd76b6f3d82fc7.png"
    ],
    "collectCount": 67,
    "tags": [
      "http",
      "网络",
      "服务器"
    ]
  },
  {
    "articleId": 105361028,
    "title": "Spring高频基础问题面试整理",
    "description": "Spring相关高频面试题整理",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105361028",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1705511,
    "commentCount": 468,
    "editUrl": "https://mp.csdn.net/console/editor/html/105361028",
    "postTime": "2020-04-07 11:48:27",
    "diggCount": 46,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/4771e122c371f927464390d7e2a1b73b.png"
    ],
    "collectCount": 389,
    "tags": [
      "spring",
      "java",
      "spring cloud"
    ]
  },
  {
    "articleId": 105361002,
    "title": "MySQL高频基本面试问题整理",
    "description": "总结MySQL高频基本面试问题整理，用于快速查缺补漏",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105361002",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1709402,
    "commentCount": 464,
    "editUrl": "https://mp.csdn.net/console/editor/html/105361002",
    "postTime": "2020-04-07 11:47:29",
    "diggCount": 107,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/365efe1ac1d2d88622ca2e7577d8d9a1.png"
    ],
    "collectCount": 863,
    "tags": [
      "mysql",
      "数据库"
    ]
  },
  {
    "articleId": 105360974,
    "title": "深入剖析MySQL索引优化：提升数据库性能的核心技巧",
    "description": "本文深入探讨了MySQL数据库中的索引机制，重点分析了B+树索引的原理及其在查询优化中的应用。通过讲解常见的索引类型及其优缺点，本文帮助读者理解如何根据不同的业务需求和查询场景选择合适的索引策略。文章还介绍了常见的索引优化技巧，如避免全表扫描、使用覆盖索引和定期维护索引，以提高数据库性能。最终，本文旨在帮助开发者掌握MySQL索引优化的关键方法，提升系统的响应速度和稳定性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105360974",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1734782,
    "commentCount": 1073,
    "editUrl": "https://mp.csdn.net/console/editor/html/105360974",
    "postTime": "2020-04-07 11:46:20",
    "diggCount": 187,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/3e6f69a6c4b896f8663fba02ab103bfe.png"
    ],
    "collectCount": 1276,
    "tags": [
      "sql",
      "mysql",
      "数据库",
      "后端",
      "性能优化"
    ]
  },
  {
    "articleId": 105360939,
    "title": "Redis高频面试基本问题整理",
    "description": "对Redis一些重点内容进行整理总结用于查缺补漏",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105360939",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1706390,
    "commentCount": 435,
    "editUrl": "https://mp.csdn.net/console/editor/html/105360939",
    "postTime": "2020-04-07 11:45:25",
    "diggCount": 64,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a8a9ba2c95b67d4a14c704341fcfa2cf.png"
    ],
    "collectCount": 456,
    "tags": [
      "redis",
      "数据库",
      "缓存"
    ]
  },
  {
    "articleId": 105360860,
    "title": "深度解析ZGC：高效垃圾回收的应用与优化",
    "description": "主要总结ZGC关键技术与垃圾回收原理，并总结ZGC调优案例实践，以及业务升级JDK11与应用ZGC注意事项",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105360860",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1736169,
    "commentCount": 857,
    "editUrl": "https://mp.csdn.net/console/editor/html/105360860",
    "postTime": "2020-04-07 11:44:14",
    "diggCount": 127,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5c5db0bf25de8aa39cf93a7d5c4ca141.png"
    ],
    "collectCount": 878,
    "tags": [
      "jvm"
    ]
  },
  {
    "articleId": 105358094,
    "title": "提升JVM性能：CMS垃圾回收器的优化分析与案例研究",
    "description": "本文介绍了CMS（Concurrent Mark-Sweep）垃圾回收器的工作原理、优缺点及常见问题，并通过具体案例分析了其优化策略。重点探讨了CMS的各个阶段，包括标记、并发清理和重标记，分析了可能导致性能瓶颈的因素如停顿时间过长和内存碎片化。文章还分享了调整垃圾回收参数、结合其他垃圾回收器以及内存优化等方法，帮助提高CMS的回收效率和性能。最后，文章展望了随着JVM发展，结合新一代垃圾回收器优化的趋势，助力Java应用在高并发环境下的性能提升。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/105358094",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1713133,
    "commentCount": 456,
    "editUrl": "https://mp.csdn.net/console/editor/html/105358094",
    "postTime": "2020-04-07 11:39:18",
    "diggCount": 29,
    "formatTime": "2020.04.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/3147f17c294f4920646a20c2f83b314b.png"
    ],
    "collectCount": 101,
    "tags": [
      "jvm",
      "后端"
    ]
  },
  {
    "articleId": 88667231,
    "title": "基于Shell脚本的Java服务管理与配置初始化自动化方案",
    "description": "本文通过两个主要脚本app.sh和start.sh，展示了如何实现Java服务的管理和配置初始化自动化。app.sh脚本负责Java服务的启动、停止、重启和状态查询，而start.sh脚本则用于初始化配置文件、管理软链接和启动服务。本文详细介绍了各个功能模块的实现方法，包括如何检查服务是否运行、如何动态更新配置文件、如何通过软链接管理日志目录以及如何使用confd工具实现配置管理。通过实例演示，读者可以清晰地了解如何应用这套脚本方案来优化微服务的管理和维护工作。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/88667231",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1687772,
    "commentCount": 496,
    "editUrl": "https://mp.csdn.net/console/editor/html/88667231",
    "postTime": "2020-04-03 18:23:34",
    "diggCount": 17,
    "formatTime": "2020.04.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c06402c93ad9154725e8dd1c9b9e5690.png"
    ],
    "collectCount": 17,
    "tags": [
      "java",
      "linux",
      "开发语言"
    ]
  },
  {
    "articleId": 88641737,
    "title": "Shell提升配置管理的效率与质量：基于Shell脚本修改变更值",
    "description": "基于Shell脚本修改变更值：我们详细展示了现有的配置文件内容和相关代码，并针对原始脚本提出了优化建议。优化后的脚本不仅提高了代码的可读性、灵活性和稳健性，还增加了实用性和可维护性。具体的优化措施包括增加注释、加强参数验证、提取重复代码到函数中、定义常量、添加日志记录功能、支持命令行参数传递以及使用更具可读性的语法结构。希望对以后的编码有所帮助。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/88641737",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1690967,
    "commentCount": 483,
    "editUrl": "https://mp.csdn.net/console/editor/html/88641737",
    "postTime": "2020-04-03 18:17:45",
    "diggCount": 17,
    "formatTime": "2020.04.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0f25a1fda00385f69ffda008f682ad5b.png"
    ],
    "collectCount": 14,
    "tags": [
      "shell"
    ]
  },
  {
    "articleId": 100706167,
    "title": "高频面试题基本总结回顾（含笔试高频算法整理）",
    "description": "1.自我介绍+项目介绍+项目细节/难点提问-------这个主要看个人的经历了，每个人都不一样2.基础知识点考核---------还是可以去增强自己的，也是这次的主要的一些总结思路3.算法题-----------一般都是LeetCode高频题，这个得在找工作之前的好好的练习(d对常见的高频题进行总结分析，见对应的链接提示)",
    "url": "https://zyfcodes.blog.csdn.net/article/details/100706167",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1731819,
    "commentCount": 959,
    "editUrl": "https://mp.csdn.net/console/editor/html/100706167",
    "postTime": "2020-04-03 18:13:53",
    "diggCount": 352,
    "formatTime": "2020.04.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/13ca0fd20c50ba3971f7c654de839573.png"
    ],
    "collectCount": 2861,
    "tags": [
      "面试",
      "java",
      "职场和发展"
    ]
  },
  {
    "articleId": 104836403,
    "title": "淘系商品的成长密码：历史与趋势透视",
    "description": "本文分析了淘系商品的发展历程，从早期的市场探索到如今的行业领先地位，深入探讨了技术创新、供应链优化、用户需求洞察等关键因素在淘系商品成功中的作用。通过对平台不断完善商品生态、提升购物体验和服务的过程分析，文章总结了淘系商品在竞争激烈的市场中如何通过创新应对挑战并推动电商行业的进步。未来，随着消费趋势变化和新兴模式的兴起，淘系商品将在更大范围内发挥其市场影响力。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/104836403",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 22695,
    "commentCount": 484,
    "editUrl": "https://mp.csdn.net/console/editor/html/104836403",
    "postTime": "2020-03-13 11:03:38",
    "diggCount": 15,
    "formatTime": "2020.03.13",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/9fda11f5c7ecfb0ee94ad464370cf1fd.png"
    ],
    "collectCount": 15,
    "tags": [
      "系统架构",
      "后端"
    ]
  },
  {
    "articleId": 97183370,
    "title": "剑指offer所有编程练习总结分析",
    "description": "给出剑指offer所有题目描述和对应的解题思路，并且在最有给出对应的代码展示和测试内容由于牛客剑指Offer题目经过整理和筛选，是面试备考的经典资源之一，因此它的重要性在面试准备过程中是很高的。做这些题目可以帮助面试者熟悉常见的面试题型、巩固基础知识、提升编程能力，为应对面试提供了很好的准备。然而，还需注意不仅仅局限于做题，理解背后的原理和思想同样重要，以便能够在面试时灵活运用和展示自己的能力。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/97183370",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1691129,
    "commentCount": 495,
    "editUrl": "https://mp.csdn.net/console/editor/html/97183370",
    "postTime": "2019-07-25 00:27:03",
    "diggCount": 28,
    "formatTime": "2019.07.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f1379301ff8214a4270ee5de109904dd.png"
    ],
    "collectCount": 99,
    "tags": [
      "算法",
      "java",
      "数据结构"
    ]
  },
  {
    "articleId": 90384502,
    "title": "Java代理模式快速解析：从静态代理到动态代理",
    "description": "本文深入探讨了代理模式的核心概念、类型划分（静态代理与动态代理）及其典型应用场景，并通过代码示例详细演示了不同实现方式。静态代理以编译时绑定的方式增强功能，而动态代理则通过运行时生成实现高灵活性，特别适用于复杂多变的需求。文章还结合实际案例，展示了代理模式在日志记录、权限控制和分布式系统中的广泛应用，帮助读者全面掌握该模式的理论与实践。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/90384502",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1648853,
    "commentCount": 475,
    "editUrl": "https://mp.csdn.net/console/editor/html/90384502",
    "postTime": "2019-05-21 00:11:30",
    "diggCount": 75,
    "formatTime": "2019.05.21",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/64a92f4616a4d5af59ede74c7f352bef.png"
    ],
    "collectCount": 213,
    "tags": [
      "设计模式",
      "代理模式",
      "后端"
    ]
  },
  {
    "articleId": 87958174,
    "title": "统计一篇超过10G的文章中每个单词出现的次数",
    "description": "本文介绍了一种基于分布式计算和多线程技术的方案，用于高效统计超大文本（如10GB以上）中每个单词的出现次数。文章首先讲解了如何将大文件切割成小文件，并将这些小文件分配到多台计算机上进行并行处理。每台计算机通过多线程统计本地文件的单词频率，并将结果合并到全局统计中。最终，统计结果可以存储到Redis等分布式存储系统中，以便快速查询。本文还讨论了性能优化的策略，如哈希算法的选择、并行计算的优化等，为大规模文本数据处理提供了有效的解决方案。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87958174",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1687508,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/87958174",
    "postTime": "2019-02-27 21:04:12",
    "diggCount": 25,
    "formatTime": "2019.02.27",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/b6d0fa3b78222f9ec886100cff7aac76.png"
    ],
    "collectCount": 40,
    "tags": [
      "java",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 87272970,
    "title": "直击高频编程考点：字符串知识及经典算法题总结",
    "description": "字符串相关基本练习题总结（最长公共子串、最长回文子串、最长无重复字符子串、最小覆盖子串、字符串相乘、中文数字表达转实际数字格式等）参考书籍、文献和资料：【1】郑天民. 微服务设计原理与架构. 北京：人民邮电出版社，2018.",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87272970",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1688136,
    "commentCount": 498,
    "editUrl": "https://mp.csdn.net/console/editor/html/87272970",
    "postTime": "2019-02-14 14:42:25",
    "diggCount": 17,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c87b86d4ee79fd0722c342e8ae183a3a.png"
    ],
    "collectCount": 20,
    "tags": [
      "算法",
      "数据结构"
    ]
  },
  {
    "articleId": 87272337,
    "title": "聚焦Spring Cloud Hystrix原理与注意事项",
    "description": "本文介绍了Spring Cloud Hystrix框架在微服务架构中的应用，重点讲解了其通过熔断器、线程池隔离和降级策略等机制，提升系统的容错性和稳定性。Hystrix能够有效防止服务故障的连锁反应，确保系统的高可用性。通过对Hystrix的基本原理和实际应用的解析，本文为开发者提供了在分布式系统中实现错误处理和系统容错的思路。尽管新技术如Resilience4j逐步替代了Hystrix，但它依然是微服务容错设计的经典实践。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87272337",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1641682,
    "commentCount": 470,
    "editUrl": "https://mp.csdn.net/console/editor/html/87272337",
    "postTime": "2019-02-14 14:34:52",
    "diggCount": 39,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/8000cdb063a7d94d3a3650b838b6dae5.png"
    ],
    "collectCount": 61,
    "tags": [
      "spring cloud",
      "微服务",
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 87271644,
    "title": "微服务架构 Spring Cloud 生态快速回顾指南",
    "description": "本文介绍了Spring Cloud在微服务架构中的核心组件及其应用。Spring Cloud提供了服务注册与发现、负载均衡、配置管理和容错机制等功能，简化了分布式系统的构建与管理。通过对这些组件的分析，本文阐述了如何利用Spring Cloud提高微服务系统的可用性、灵活性和可扩展性。最终，本文强调了Spring Cloud作为现代云原生应用开发的重要工具，帮助开发者构建高效、可靠的微服务架构。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87271644",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1651290,
    "commentCount": 399,
    "editUrl": "https://mp.csdn.net/console/editor/html/87271644",
    "postTime": "2019-02-14 14:23:56",
    "diggCount": 46,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/72213acfa967a94370d4b293b87b2b9c.png"
    ],
    "collectCount": 123,
    "tags": [
      "spring cloud",
      "微服务",
      "架构"
    ]
  },
  {
    "articleId": 87271456,
    "title": "高效的布隆过滤器：实现、优化与应用案例",
    "description": "本文介绍了布隆过滤器的基本原理及其在大数据领域的应用。首先，阐述了布隆过滤器的工作机制和实现方法，随后深入分析了Guava框架中布隆过滤器的实现及其优化。通过实际案例，本文展示了布隆过滤器在数据去重和存在性判断中的优势，尽管存在一定的误判率，但其高效的内存使用使其在大数据处理场景中得到了广泛应用。最后，文章总结了布隆过滤器的实践意义，强调了其在提升系统性能中的重要作用。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87271456",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1649901,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/87271456",
    "postTime": "2019-02-14 14:21:17",
    "diggCount": 37,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/6ac1011b67bfe0555d571f4b625c702d.png"
    ],
    "collectCount": 96,
    "tags": [
      "spring boot",
      "java",
      "缓存",
      "分布式"
    ]
  },
  {
    "articleId": 87271101,
    "title": "微服务架构核心需求解析与技术选型指南",
    "description": "本文全面分析了微服务架构的实现需求与技术选型，从服务注册与发现、服务通信、服务容错等核心功能出发，对 Consul、Zookeeper、Eureka、etcd 等服务注册中心，以及 Spring Cloud、Dubbo、gRPC、Istio 等微服务框架进行了详细对比。通过功能完备性、实现难度、适用场景等多个维度，明确各技术方案的优势与适用性，并探讨了 Service Mesh 和 Kubernetes 深度集成的未来趋势，为企业在微服务架构实践中的技术选型提供了清晰指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/87271101",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1656961,
    "commentCount": 474,
    "editUrl": "https://mp.csdn.net/console/editor/html/87271101",
    "postTime": "2019-02-14 14:18:34",
    "diggCount": 37,
    "formatTime": "2019.02.14",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/c21f2e339f771e665afd5b2f470d9c9a.png"
    ],
    "collectCount": 86,
    "tags": [
      "微服务",
      "架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 86772740,
    "title": "从容错到限流：保障微服务可靠性的关键策略分析",
    "description": "本文探讨了微服务架构中常见的容错与故障应对机制，包括限流、降级和熔断。通过对这些机制的原理、应用场景和实现方法的详细分析，本文旨在帮助读者理解如何在高并发和故障环境中确保系统的稳定性与高可用性。文章强调了合理设计和灵活应用容错策略对提升系统可靠性的重要性，同时也展望了随着微服务架构发展，容错机制的未来方向。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86772740",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1653178,
    "commentCount": 492,
    "editUrl": "https://mp.csdn.net/console/editor/html/86772740",
    "postTime": "2019-02-07 20:13:53",
    "diggCount": 31,
    "formatTime": "2019.02.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/4ce795d5a6693e6d584b839ef1a80bfc.png"
    ],
    "collectCount": 49,
    "tags": [
      "架构",
      "微服务",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 86772650,
    "title": "微服务架构：数据一致性问题全景解析",
    "description": "微服务架构中的数据一致性问题是系统设计的核心挑战之一。本文分析了微服务架构中数据分布式管理的复杂性，探讨了跨服务的数据一致性技术，包括分布式事务、最终一致性模式（如Saga）以及事件驱动架构的应用。通过实际案例解析，文章还讨论了在不同场景下选择合适策略的权衡点，帮助开发者在提升系统灵活性的同时，保障数据一致性和可靠性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86772650",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1659482,
    "commentCount": 487,
    "editUrl": "https://mp.csdn.net/console/editor/html/86772650",
    "postTime": "2019-02-07 20:03:27",
    "diggCount": 52,
    "formatTime": "2019.02.07",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/e1172e97e6e24208884403582f9afaab.png"
    ],
    "collectCount": 195,
    "tags": [
      "分布式",
      "微服务",
      "架构",
      "后端"
    ]
  },
  {
    "articleId": 86770057,
    "title": "微服务架构下服务注册与发现与治理机制",
    "description": "服务注册中心：注册中心核心功能+实现策略，讲解注册中心核心功能和注册中心实现策略+服务发布与注册+服务发现与调用+服务监控",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86770057",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1658199,
    "commentCount": 476,
    "editUrl": "https://mp.csdn.net/console/editor/html/86770057",
    "postTime": "2019-02-06 23:42:42",
    "diggCount": 34,
    "formatTime": "2019.02.06",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/24dd6df0237f42fa015ec083be292acf.png"
    ],
    "collectCount": 59,
    "tags": [
      "微服务",
      "架构",
      "服务发现",
      "后端"
    ]
  },
  {
    "articleId": 86694766,
    "title": "Shell使用软链接挂载目录的最佳实践",
    "description": "将某一目录整体通过软连接挂载到目标目录，可以方便于自身的管理与分析。1.设置打印日志，方便问题定位，采用函数方式在多处可以引用；2.将这个外挂软连接的方式用函数实现，方便在多处使用，同时，给具体目录更改对应的权限控制；3.针对自己当前的业务使用上面的基本函数实现自我的功能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86694766",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1687609,
    "commentCount": 461,
    "editUrl": "https://mp.csdn.net/console/editor/html/86694766",
    "postTime": "2019-01-29 20:04:49",
    "diggCount": 16,
    "formatTime": "2019.01.29",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/093277ca4faa47eefa8fffd7b44e4c2e.png"
    ],
    "collectCount": 16,
    "tags": [
      "后端",
      "linux"
    ]
  },
  {
    "articleId": 86605409,
    "title": "Redis实用附加功能功能回顾：从慢查询到发布订阅",
    "description": "本文深入探讨了Redis的多个功能模块，包括慢查询分析、Redis Shell、Pipeline、事务与Lua脚本、Bitmaps、HyperLogLog、发布订阅等。通过这些功能，开发者能够优化Redis性能、提升响应速度、减少内存占用，并有效支持高并发、大数据量的场景应用。文章不仅介绍了这些功能的使用方法，还提供了最佳实践和优化建议，帮助开发者在实际应用中实现性能提升和资源优化。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86605409",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1655829,
    "commentCount": 482,
    "editUrl": "https://mp.csdn.net/console/editor/html/86605409",
    "postTime": "2019-01-23 10:27:25",
    "diggCount": 27,
    "formatTime": "2019.01.23",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5985bf504d79e49ae00ea6715483974e.png"
    ],
    "collectCount": 31,
    "tags": [
      "redis",
      "数据库",
      "后端"
    ]
  },
  {
    "articleId": 86596105,
    "title": "Redis键值操作全景解析：API、编码方式与应用场景",
    "description": "本文介绍了 Redis 的基本键值 API 使用、内部编码机制和常见使用场景。首先，详细讲解了如何使用 Redis 提供的不同命令进行数据操作，帮助开发者掌握基础功能。然后，深入分析了 Redis 的内部编码，如字符串、列表、哈希表和有序集合等数据类型如何优化内存和性能。最后，探讨了 Redis 在缓存、数据存储和消息队列等不同场景中的应用，帮助读者更好地理解如何在实际项目中合理选择和使用 Redis。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86596105",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1658527,
    "commentCount": 480,
    "editUrl": "https://mp.csdn.net/console/editor/html/86596105",
    "postTime": "2019-01-22 15:56:08",
    "diggCount": 24,
    "formatTime": "2019.01.22",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0798298d72053110f0dd5bd7e7536dcb.png"
    ],
    "collectCount": 25,
    "tags": [
      "redis",
      "缓存",
      "数据库"
    ]
  },
  {
    "articleId": 86517016,
    "title": "MyBatis TypeHandler 实战指南：自定义类型转换与案例解析",
    "description": "Mybatis TypeHandler介绍使用举例，主要回顾Mybatis的原理内容，在介绍TypeHandler的基本功能，最后给出使用TypeHandler的样例和注意事项等内容",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86517016",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 822069,
    "commentCount": 476,
    "editUrl": "https://mp.csdn.net/console/editor/html/86517016",
    "postTime": "2019-01-17 00:14:02",
    "diggCount": 23,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/906b35fdfb4e63e136a67878168bcef7.png"
    ],
    "collectCount": 52,
    "tags": [
      "mybatis",
      "mysql",
      "数据库",
      "后端"
    ]
  },
  {
    "articleId": 86516999,
    "title": "揭秘CAS：深入理解与应用解析",
    "description": "在并发编程中，Compare-And-Swap（CAS）机制作为一种无锁算法，凭借其高效性和避免线程阻塞的优势，受到广泛关注。CAS不仅在底层实现上有着重要地位，还在实际开发中发挥着关键作用。本文将从CAS的工作原理、在Java中的实现及其增强机制来回顾和加深理解一下CAS。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516999",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 814934,
    "commentCount": 479,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516999",
    "postTime": "2019-01-17 00:12:31",
    "diggCount": 15,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/2f9fcc8a9386759f66c6336f08e671e3.png"
    ],
    "collectCount": 21,
    "tags": [
      "java",
      "后端"
    ]
  },
  {
    "articleId": 86516988,
    "title": "常见限流算法和Guava RateLimiter实现",
    "description": "本文探讨了限流（Rate Limiting）的基本原理及常见算法，包括令牌桶算法、漏桶算法和固定窗口算法，并分析了它们在分布式系统中的应用。通过具体示例介绍了Guava的RateLimiter组件的使用，阐述了如何在高并发场景下实现流量控制。限流策略不仅能保障系统稳定性，还能有效防止过载和滥用。掌握合适的限流算法，有助于提升系统的性能和可用性，确保在流量波动时维持服务质量。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516988",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 820228,
    "commentCount": 448,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516988",
    "postTime": "2019-01-17 00:11:34",
    "diggCount": 16,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/dcbcdf50f2857a5013ae4d4c5a26cd3c.png"
    ],
    "collectCount": 18,
    "tags": [
      "guava",
      "java",
      "算法",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 86516955,
    "title": "阿里Sentinel学习与实践总结：流量控制、熔断降级全解析",
    "description": "本文总结了阿里Sentinel的核心功能和使用方法，重点介绍了流量控制、熔断降级、限流等机制在微服务架构中的应用。通过对Sentinel的学习与实践，本文阐述了其在保障系统稳定性和高可用性方面的关键作用，并探讨了如何在不同业务场景中灵活配置和使用Sentinel。最后，文章总结了Sentinel作为分布式系统中流量管理的利器，其在微服务架构中的不可或缺的地位。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516955",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 821479,
    "commentCount": 439,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516955",
    "postTime": "2019-01-17 00:08:26",
    "diggCount": 16,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7a226afe381d790bcbbc0938cad3f5f9.png"
    ],
    "collectCount": 18,
    "tags": [
      "sentinel",
      "学习",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 86516943,
    "title": "MySQL事务机制深度解析：从原理到应用",
    "description": "本文深入探讨了MySQL事务的基本概念和实现原理，重点分析了ACID原则、事务的隔离级别、以及InnoDB存储引擎如何通过MVCC、多版本并发控制、锁机制和日志文件保障事务的原子性、一致性、隔离性和持久性。通过对MySQL事务底层实现的详细解析，本文帮助读者理解事务管理在数据库设计和优化中的重要性，并为开发者提供了在高并发环境中保证数据一致性和可靠性的实用知识。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516943",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 823632,
    "commentCount": 402,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516943",
    "postTime": "2019-01-17 00:07:25",
    "diggCount": 26,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a921c983d896ae09993fc31eb77530c3.png"
    ],
    "collectCount": 60,
    "tags": [
      "mysql",
      "数据库",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 86516911,
    "title": "自动化Google Chrome的强大工具：chromedriver下载、安装、简单使用",
    "description": "本文介绍了 ChromeDriver 的基本概念和安装配置方法，重点讲解了如何通过 Selenium 实现 Chrome 浏览器的自动化测试。内容涵盖了 ChromeDriver 下载、版本匹配、依赖引入和简单的自动化测试脚本示例，帮助读者快速上手并避免常见问题。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516911",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 827867,
    "commentCount": 472,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516911",
    "postTime": "2019-01-17 00:03:11",
    "diggCount": 30,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/1ddb60e740874c45a189df10f23d44bc.png"
    ],
    "collectCount": 55,
    "tags": [
      "chrome",
      "集成测试",
      "后端"
    ]
  },
  {
    "articleId": 86516890,
    "title": "MySQL：基本表查询操作汇总（单表查询+多表操作）",
    "description": "本文详细介绍了MySQL单表查询和多表操作的基础知识和实践方法。单表查询部分涵盖了简单查询、条件查询、高级查询以及表和字段取别名等内容，通过具体示例展示了各类查询的基本用法。多表操作部分则探讨了外键约束、关联表操作、连接查询和子查询等技术，并结合实际案例演示了多表查询的应用场景。文章最后总结了提高查询效率和保证数据质量的注意事项，旨在帮助读者更好地理解和应用MySQL的查询技术，以提升数据库管理和数据处理的能力。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516890",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 824912,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516890",
    "postTime": "2019-01-17 00:00:13",
    "diggCount": 20,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/cc4e33cf483944299903c7cbab6a0810.png"
    ],
    "collectCount": 22,
    "tags": [
      "mysql",
      "数据库",
      "sql"
    ]
  },
  {
    "articleId": 86516876,
    "title": "实现一个熔断器公共组件接入其他服务？",
    "description": "实现一个熔断器公共组件接入其他服务？回顾熔断器的基本概念及其工作原理，介绍如何通过监控失败率来判断调用是否可能失败，以及熔断器如何在服务恢复时自动切换状态。接着，提供了一个 Java 实现的基本熔断器代码示例，展示了熔断器如何管理状态并处理服务调用。最后，文章列出了几种流行的开源熔断器库供后续学习",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516876",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 825897,
    "commentCount": 489,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516876",
    "postTime": "2019-01-16 23:57:45",
    "diggCount": 18,
    "formatTime": "2019.01.16",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0fd0cafb447b2143a257c08dac9cf829.png"
    ],
    "collectCount": 17,
    "tags": [
      "分布式"
    ]
  },
  {
    "articleId": 86516867,
    "title": "JVM高频基本面试问题整理",
    "description": "JVM一些基本问题的总结分享",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516867",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 829178,
    "commentCount": 490,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516867",
    "postTime": "2019-01-16 23:56:21",
    "diggCount": 24,
    "formatTime": "2019.01.16",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1a068eb24187911d9641605e3c44b64e.png"
    ],
    "collectCount": 89,
    "tags": [
      "jvm"
    ]
  },
  {
    "articleId": 85682513,
    "title": "微服务架构的六大核心组件解析：服务通信+事件驱动+负载均衡+服务路由+API网关+配置管理",
    "description": "本文介绍了微服务架构中的六大基础组件：服务通信、事件驱动、负载均衡、服务路由、API网关和配置管理。通过深入分析每个组件的功能和实现方式，本文阐述了这些组件如何协同工作，以提高系统的可扩展性、可靠性和灵活性。文章还强调了微服务架构在实际应用中的挑战，并提供了优化架构设计的建议，以帮助企业构建高效、可维护的分布式系统。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85682513",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1671562,
    "commentCount": 459,
    "editUrl": "https://mp.csdn.net/console/editor/html/85682513",
    "postTime": "2019-01-03 11:04:50",
    "diggCount": 43,
    "formatTime": "2019.01.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/6bfeca31b37bde3d97bbcc588a555c30.png"
    ],
    "collectCount": 180,
    "tags": [
      "负载均衡",
      "架构",
      "微服务",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 85330132,
    "title": "MyBatis架构设计中的经典设计模式分析",
    "description": "本文通过深入分析 MyBatis 框架中的设计模式，探讨了多个关键设计模式如何在 MyBatis 中实现和应用，包括工厂模式、单例模式、代理模式和责任链模式等。通过对源码的详细解读，本文阐述了这些设计模式如何提升框架的灵活性、可维护性和扩展性。文章旨在帮助开发者理解并掌握 MyBatis 框架中的设计模式应用，从而在实际项目中优化数据访问层的架构设计。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85330132",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1686352,
    "commentCount": 491,
    "editUrl": "https://mp.csdn.net/console/editor/html/85330132",
    "postTime": "2018-12-28 19:04:53",
    "diggCount": 17,
    "formatTime": "2018.12.28",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/03ac9bd4fc0f998e7b67fb0006379eaa.png"
    ],
    "collectCount": 23,
    "tags": [
      "设计模式",
      "简单工厂模式",
      "建造者模式",
      "单例模式",
      "代理模式"
    ]
  },
  {
    "articleId": 85254052,
    "title": "系统集成与微服务架构：四种基本集成方式解析",
    "description": "本文介绍了系统集成的四种基本方式：文件传输、共享数据库、远程过程调用和消息传递，并分析了它们的优缺点与适用场景。同时，探讨了微服务架构中的四种集成方式：接口集成、数据集成、客户端集成和外部集成，强调根据不同需求选择合适的集成方案，以实现系统的高可用性和可扩展性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85254052",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669265,
    "commentCount": 484,
    "editUrl": "https://mp.csdn.net/console/editor/html/85254052",
    "postTime": "2018-12-25 20:50:35",
    "diggCount": 24,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a178206231be06742281cbcf3d7347ba.png"
    ],
    "collectCount": 45,
    "tags": [
      "架构",
      "微服务",
      "java",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 85253976,
    "title": "微服务架构中的事务管理与数据一致性：依赖关系与边界设计",
    "description": "本文讨论了微服务架构中的服务依赖管理、数据一致性和事务边界设计。针对服务依赖，提出了通过解耦和重构来避免循环依赖；在数据管理上，介绍了CQRS模式和领域驱动设计；事务管理方面，提出了事件驱动、Saga模式和补偿事务的解决方案，实现弱一致性和最终一致性。最后，强调了“兜底思维”，通过容错机制确保系统稳定性，保障高可用性和灵活性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253976",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669644,
    "commentCount": 460,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253976",
    "postTime": "2018-12-25 20:44:03",
    "diggCount": 23,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/799f378e52e5b37c18de093df28db747.png"
    ],
    "collectCount": 21,
    "tags": [
      "数据分析",
      "微服务",
      "系统架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253886,
    "title": "服务拆分与扩展策略：微服务架构的三维进化",
    "description": "本文探讨了微服务架构中的服务拆分与扩展策略，结合架构的轮回理论，分析了X、Y、Z轴扩展的应用场景与技术方案。通过AKF扩展立方体模型，详细阐述了如何通过服务复制、职责划分和数据分区等方法提升系统的可扩展性与灵活性。此外，文章介绍了两种常见的服务拆分策略：绞杀者模式和修缮者模式，并探讨了微服务架构的未来发展方向，包括边缘计算、事件驱动架构和服务网格的结合。旨在为架构师和开发者提供实践指导，帮助构建更加高效、稳定的微服务系统。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253886",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1677639,
    "commentCount": 434,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253886",
    "postTime": "2018-12-25 20:37:24",
    "diggCount": 25,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/929b8a135ebb1ca3f4667134147f2bd8.png"
    ],
    "collectCount": 27,
    "tags": [
      "架构",
      "微服务",
      "分布式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 85253615,
    "title": "从业务到技术：微服务建模的四大切入点",
    "description": "本文探讨了微服务架构中的服务建模方法，重点从四个切入点进行分析：服务分类、服务模型、服务边界和服务数据。首先，介绍了工具服务、实体服务和任务服务等基本分类，并从业务维度对服务进行了层次化分类。然后，讨论了服务的标准和级别，强调服务契约化和文档化的重要性。接着，阐述了如何识别服务边界，并结合领域驱动设计进行划分。最后，探讨了微服务中的数据去中心化问题，提出了解决跨表查询、跨库查询等技术耦合场景的方法。通过这些建模思路，本文为微服务架构设计提供了理论与实践指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253615",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1679860,
    "commentCount": 416,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253615",
    "postTime": "2018-12-25 20:28:28",
    "diggCount": 23,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5e7af0b8e268724e553055bc9116f5d6.png"
    ],
    "collectCount": 58,
    "tags": [
      "架构",
      "微服务",
      "云原生",
      "分布式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 85253477,
    "title": "微服务架构的实施与挑战：模式、优势与应对",
    "description": "本文探讨了微服务架构的实施，包括实施的前提、三种典型模式、实施优势和面临的挑战。首先，介绍了微服务架构实施的关键前提和所需条件；然后，详细阐述了从单体架构迁移、从无到有构建以及混合式架构等三种实施模式；接着，分析了微服务带来的技术和业务优势，如提高开发效率和组织灵活性；最后，讨论了实施微服务时可能遇到的技术挑战，如分布式事务管理和服务治理等问题，旨在为企业提供在实施微服务时的参考和指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253477",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1681534,
    "commentCount": 428,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253477",
    "postTime": "2018-12-25 20:08:12",
    "diggCount": 20,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f35615089a9135267e2e2886f1fbe211.png"
    ],
    "collectCount": 32,
    "tags": [
      "微服务",
      "架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253412,
    "title": "微服务架构构建的完整路径：四大系统方法总结",
    "description": "本文介绍了构建微服务架构的系统方法，重点从四个方面展开讨论：服务模型、实现技术、基础设施和研发过程。首先，通过服务建模方法和服务拆分与集成策略，阐述了如何设计微服务架构。接着，探讨了关键技术实现，包括服务通信、事件驱动、负载均衡、API网关等。基础设施方面，文章涵盖了测试、交付部署、监控与安全等重要内容。最后，本文讨论了微服务架构转型过程中的组织和文化调整，以及如何通过敏捷开发、DevOps等实践推动研发过程的优化。通过这些内容，本文为构建高效、可扩展的微服务架构提供了全面的指导与实用的建议。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253412",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1682407,
    "commentCount": 484,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253412",
    "postTime": "2018-12-25 20:02:38",
    "diggCount": 18,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/4809f12c144591830e51e094311c24af.png"
    ],
    "collectCount": 17,
    "tags": [
      "架构",
      "微服务",
      "云原生",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253353,
    "title": "分布式锁实现解析：几种简单方式的对比与选择",
    "description": "本文分析了几种常见的分布式锁实现方式，包括基于Redis、ZooKeeper和数据库的方案。通过对每种方式的原理、优缺点进行深入剖析，本文旨在帮助开发者根据不同的应用场景选择合适的分布式锁实现。同时，文章还讨论了分布式锁的使用建议和最佳实践，为解决分布式系统中的并发控制问题提供了有效的参考。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253353",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1695868,
    "commentCount": 1371,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253353",
    "postTime": "2018-12-25 19:59:21",
    "diggCount": 17,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0e6dc1ecadf79bfabb276c6db3b31ab2.png"
    ],
    "collectCount": 40,
    "tags": [
      "架构",
      "微服务",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253251,
    "title": "理解IOC与DI：Spring容器初始化与依赖注入解析",
    "description": "本文探讨了Spring框架中的**IOC（控制反转）和DI（依赖注入）**概念。通过IOC容器管理对象的创建与依赖关系，解耦组件间的联系，提高系统灵活性。DI作为IOC的实现方式，简化了依赖管理，降低了代码耦合度。文章还讲解了Spring容器的初始化过程及依赖注入的实现，帮助开发者更好地理解和应用这些核心特性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253251",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 827786,
    "commentCount": 486,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253251",
    "postTime": "2018-12-25 19:51:08",
    "diggCount": 22,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/14eef9183f7c493bade0ae2781947c97.png"
    ],
    "collectCount": 37,
    "tags": [
      "spring boot",
      "spring",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 85169642,
    "title": "从业务需求到技术实现：动态工作流引擎的构建与应用",
    "description": "本文介绍了如何实现一个动态配置执行工作流引擎，重点讲解了工作流的设计与实现过程。通过分析工作流执行上下文、任务节点定义、执行器、调度平台等核心组件，展示了如何在不同的业务场景下灵活配置和动态执行工作流。文章还通过实际案例，阐述了智能化处理和数据流转的工作流任务，如新闻内容处理、AI赋能、数据同步等。最后，文章总结了动态配置执行工作流引擎的优势，并展望了未来优化和扩展的方向。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85169642",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1693393,
    "commentCount": 1120,
    "editUrl": "https://mp.csdn.net/console/editor/html/85169642",
    "postTime": "2018-12-21 19:16:24",
    "diggCount": 19,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1894144fc7f61e95aedeff0cfeca90e4.png"
    ],
    "collectCount": 23,
    "tags": [
      "设计模式",
      "系统架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85163814,
    "title": "MySQL：表的约束+设置表的字段值自动增加",
    "description": "MySQL：表的约束+设置表的字段值自动增加",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85163814",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 838660,
    "commentCount": 523,
    "editUrl": "https://mp.csdn.net/console/editor/html/85163814",
    "postTime": "2018-12-21 16:09:19",
    "diggCount": 19,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/88897a620b3e43e4bd58b2f71c52c94d.png"
    ],
    "collectCount": 33,
    "tags": [
      "mysql",
      "数据库",
      "sql"
    ]
  },
  {
    "articleId": 85163793,
    "title": "MYSQL数据表基本操作：创建+查看+修改+删除",
    "description": "本文介绍了如何通过SQL命令创建、查看、修改和删除数据库表。内容涵盖了表的创建、结构查看、字段修改及表删除的常用语法，并强调了操作中的注意事项，以确保数据完整性和防止误操作。旨在帮助读者掌握数据库表管理的基础技能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85163793",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 832578,
    "commentCount": 528,
    "editUrl": "https://mp.csdn.net/console/editor/html/85163793",
    "postTime": "2018-12-21 16:08:13",
    "diggCount": 27,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/fabfc9159f73462b82f3bd26c09c51ba.png"
    ],
    "collectCount": 67,
    "tags": [
      "mysql",
      "数据库",
      "sql"
    ]
  },
  {
    "articleId": 85162029,
    "title": "MYSQL数据库基本操作：创建、查看、修改、删除",
    "description": "本文介绍了MySQL数据库的基本管理操作，包括创建、查看、修改和删除数据库的常用命令及其注意事项。通过详细讲解数据库的字符集选择、修改数据库时的安全措施、删除数据库时的谨慎操作等，帮助读者掌握如何有效管理和维护数据库。此外，文章还强调了数据库的安全性、性能优化以及备份策略，旨在提高数据库操作的效率与安全性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85162029",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 845765,
    "commentCount": 1019,
    "editUrl": "https://mp.csdn.net/console/editor/html/85162029",
    "postTime": "2018-12-21 14:49:37",
    "diggCount": 38,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/68dbc3b74ba74f378515d3b1b0260835.png"
    ],
    "collectCount": 200,
    "tags": [
      "MySQL",
      "数据库",
      "mysql",
      "oracle",
      "sql"
    ]
  },
  {
    "articleId": 86516955,
    "title": "阿里Sentinel学习与实践总结：流量控制、熔断降级全解析",
    "description": "本文总结了阿里Sentinel的核心功能和使用方法，重点介绍了流量控制、熔断降级、限流等机制在微服务架构中的应用。通过对Sentinel的学习与实践，本文阐述了其在保障系统稳定性和高可用性方面的关键作用，并探讨了如何在不同业务场景中灵活配置和使用Sentinel。最后，文章总结了Sentinel作为分布式系统中流量管理的利器，其在微服务架构中的不可或缺的地位。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516955",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 821479,
    "commentCount": 439,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516955",
    "postTime": "2019-01-17 00:08:26",
    "diggCount": 16,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/7a226afe381d790bcbbc0938cad3f5f9.png"
    ],
    "collectCount": 18,
    "tags": [
      "sentinel",
      "学习",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 86516943,
    "title": "MySQL事务机制深度解析：从原理到应用",
    "description": "本文深入探讨了MySQL事务的基本概念和实现原理，重点分析了ACID原则、事务的隔离级别、以及InnoDB存储引擎如何通过MVCC、多版本并发控制、锁机制和日志文件保障事务的原子性、一致性、隔离性和持久性。通过对MySQL事务底层实现的详细解析，本文帮助读者理解事务管理在数据库设计和优化中的重要性，并为开发者提供了在高并发环境中保证数据一致性和可靠性的实用知识。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516943",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 823632,
    "commentCount": 402,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516943",
    "postTime": "2019-01-17 00:07:25",
    "diggCount": 26,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a921c983d896ae09993fc31eb77530c3.png"
    ],
    "collectCount": 60,
    "tags": [
      "mysql",
      "数据库",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 86516911,
    "title": "自动化Google Chrome的强大工具：chromedriver下载、安装、简单使用",
    "description": "本文介绍了 ChromeDriver 的基本概念和安装配置方法，重点讲解了如何通过 Selenium 实现 Chrome 浏览器的自动化测试。内容涵盖了 ChromeDriver 下载、版本匹配、依赖引入和简单的自动化测试脚本示例，帮助读者快速上手并避免常见问题。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516911",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 827867,
    "commentCount": 472,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516911",
    "postTime": "2019-01-17 00:03:11",
    "diggCount": 30,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/1ddb60e740874c45a189df10f23d44bc.png"
    ],
    "collectCount": 55,
    "tags": [
      "chrome",
      "集成测试",
      "后端"
    ]
  },
  {
    "articleId": 86516890,
    "title": "MySQL：基本表查询操作汇总（单表查询+多表操作）",
    "description": "本文详细介绍了MySQL单表查询和多表操作的基础知识和实践方法。单表查询部分涵盖了简单查询、条件查询、高级查询以及表和字段取别名等内容，通过具体示例展示了各类查询的基本用法。多表操作部分则探讨了外键约束、关联表操作、连接查询和子查询等技术，并结合实际案例演示了多表查询的应用场景。文章最后总结了提高查询效率和保证数据质量的注意事项，旨在帮助读者更好地理解和应用MySQL的查询技术，以提升数据库管理和数据处理的能力。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516890",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 824912,
    "commentCount": 467,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516890",
    "postTime": "2019-01-17 00:00:13",
    "diggCount": 20,
    "formatTime": "2019.01.17",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/cc4e33cf483944299903c7cbab6a0810.png"
    ],
    "collectCount": 22,
    "tags": [
      "mysql",
      "数据库",
      "sql"
    ]
  },
  {
    "articleId": 86516876,
    "title": "实现一个熔断器公共组件接入其他服务？",
    "description": "实现一个熔断器公共组件接入其他服务？回顾熔断器的基本概念及其工作原理，介绍如何通过监控失败率来判断调用是否可能失败，以及熔断器如何在服务恢复时自动切换状态。接着，提供了一个 Java 实现的基本熔断器代码示例，展示了熔断器如何管理状态并处理服务调用。最后，文章列出了几种流行的开源熔断器库供后续学习",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516876",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 825897,
    "commentCount": 489,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516876",
    "postTime": "2019-01-16 23:57:45",
    "diggCount": 18,
    "formatTime": "2019.01.16",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0fd0cafb447b2143a257c08dac9cf829.png"
    ],
    "collectCount": 17,
    "tags": [
      "分布式"
    ]
  },
  {
    "articleId": 86516867,
    "title": "JVM高频基本面试问题整理",
    "description": "JVM一些基本问题的总结分享",
    "url": "https://zyfcodes.blog.csdn.net/article/details/86516867",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 829178,
    "commentCount": 490,
    "editUrl": "https://mp.csdn.net/console/editor/html/86516867",
    "postTime": "2019-01-16 23:56:21",
    "diggCount": 24,
    "formatTime": "2019.01.16",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1a068eb24187911d9641605e3c44b64e.png"
    ],
    "collectCount": 89,
    "tags": [
      "jvm"
    ]
  },
  {
    "articleId": 85682513,
    "title": "微服务架构的六大核心组件解析：服务通信+事件驱动+负载均衡+服务路由+API网关+配置管理",
    "description": "本文介绍了微服务架构中的六大基础组件：服务通信、事件驱动、负载均衡、服务路由、API网关和配置管理。通过深入分析每个组件的功能和实现方式，本文阐述了这些组件如何协同工作，以提高系统的可扩展性、可靠性和灵活性。文章还强调了微服务架构在实际应用中的挑战，并提供了优化架构设计的建议，以帮助企业构建高效、可维护的分布式系统。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85682513",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1671562,
    "commentCount": 459,
    "editUrl": "https://mp.csdn.net/console/editor/html/85682513",
    "postTime": "2019-01-03 11:04:50",
    "diggCount": 43,
    "formatTime": "2019.01.03",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/6bfeca31b37bde3d97bbcc588a555c30.png"
    ],
    "collectCount": 180,
    "tags": [
      "负载均衡",
      "架构",
      "微服务",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 85330132,
    "title": "MyBatis架构设计中的经典设计模式分析",
    "description": "本文通过深入分析 MyBatis 框架中的设计模式，探讨了多个关键设计模式如何在 MyBatis 中实现和应用，包括工厂模式、单例模式、代理模式和责任链模式等。通过对源码的详细解读，本文阐述了这些设计模式如何提升框架的灵活性、可维护性和扩展性。文章旨在帮助开发者理解并掌握 MyBatis 框架中的设计模式应用，从而在实际项目中优化数据访问层的架构设计。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85330132",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1686352,
    "commentCount": 491,
    "editUrl": "https://mp.csdn.net/console/editor/html/85330132",
    "postTime": "2018-12-28 19:04:53",
    "diggCount": 17,
    "formatTime": "2018.12.28",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/03ac9bd4fc0f998e7b67fb0006379eaa.png"
    ],
    "collectCount": 23,
    "tags": [
      "设计模式",
      "简单工厂模式",
      "建造者模式",
      "单例模式",
      "代理模式"
    ]
  },
  {
    "articleId": 85254052,
    "title": "系统集成与微服务架构：四种基本集成方式解析",
    "description": "本文介绍了系统集成的四种基本方式：文件传输、共享数据库、远程过程调用和消息传递，并分析了它们的优缺点与适用场景。同时，探讨了微服务架构中的四种集成方式：接口集成、数据集成、客户端集成和外部集成，强调根据不同需求选择合适的集成方案，以实现系统的高可用性和可扩展性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85254052",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669265,
    "commentCount": 484,
    "editUrl": "https://mp.csdn.net/console/editor/html/85254052",
    "postTime": "2018-12-25 20:50:35",
    "diggCount": 24,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a178206231be06742281cbcf3d7347ba.png"
    ],
    "collectCount": 45,
    "tags": [
      "架构",
      "微服务",
      "java",
      "后端",
      "分布式"
    ]
  },
  {
    "articleId": 85253976,
    "title": "微服务架构中的事务管理与数据一致性：依赖关系与边界设计",
    "description": "本文讨论了微服务架构中的服务依赖管理、数据一致性和事务边界设计。针对服务依赖，提出了通过解耦和重构来避免循环依赖；在数据管理上，介绍了CQRS模式和领域驱动设计；事务管理方面，提出了事件驱动、Saga模式和补偿事务的解决方案，实现弱一致性和最终一致性。最后，强调了“兜底思维”，通过容错机制确保系统稳定性，保障高可用性和灵活性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253976",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1669644,
    "commentCount": 460,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253976",
    "postTime": "2018-12-25 20:44:03",
    "diggCount": 23,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/799f378e52e5b37c18de093df28db747.png"
    ],
    "collectCount": 21,
    "tags": [
      "数据分析",
      "微服务",
      "系统架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253886,
    "title": "服务拆分与扩展策略：微服务架构的三维进化",
    "description": "本文探讨了微服务架构中的服务拆分与扩展策略，结合架构的轮回理论，分析了X、Y、Z轴扩展的应用场景与技术方案。通过AKF扩展立方体模型，详细阐述了如何通过服务复制、职责划分和数据分区等方法提升系统的可扩展性与灵活性。此外，文章介绍了两种常见的服务拆分策略：绞杀者模式和修缮者模式，并探讨了微服务架构的未来发展方向，包括边缘计算、事件驱动架构和服务网格的结合。旨在为架构师和开发者提供实践指导，帮助构建更加高效、稳定的微服务系统。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253886",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1677639,
    "commentCount": 434,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253886",
    "postTime": "2018-12-25 20:37:24",
    "diggCount": 25,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/929b8a135ebb1ca3f4667134147f2bd8.png"
    ],
    "collectCount": 27,
    "tags": [
      "架构",
      "微服务",
      "分布式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 85253615,
    "title": "从业务到技术：微服务建模的四大切入点",
    "description": "本文探讨了微服务架构中的服务建模方法，重点从四个切入点进行分析：服务分类、服务模型、服务边界和服务数据。首先，介绍了工具服务、实体服务和任务服务等基本分类，并从业务维度对服务进行了层次化分类。然后，讨论了服务的标准和级别，强调服务契约化和文档化的重要性。接着，阐述了如何识别服务边界，并结合领域驱动设计进行划分。最后，探讨了微服务中的数据去中心化问题，提出了解决跨表查询、跨库查询等技术耦合场景的方法。通过这些建模思路，本文为微服务架构设计提供了理论与实践指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253615",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1679860,
    "commentCount": 416,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253615",
    "postTime": "2018-12-25 20:28:28",
    "diggCount": 23,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/5e7af0b8e268724e553055bc9116f5d6.png"
    ],
    "collectCount": 58,
    "tags": [
      "架构",
      "微服务",
      "云原生",
      "分布式",
      "后端",
      "算法"
    ]
  },
  {
    "articleId": 85253477,
    "title": "微服务架构的实施与挑战：模式、优势与应对",
    "description": "本文探讨了微服务架构的实施，包括实施的前提、三种典型模式、实施优势和面临的挑战。首先，介绍了微服务架构实施的关键前提和所需条件；然后，详细阐述了从单体架构迁移、从无到有构建以及混合式架构等三种实施模式；接着，分析了微服务带来的技术和业务优势，如提高开发效率和组织灵活性；最后，讨论了实施微服务时可能遇到的技术挑战，如分布式事务管理和服务治理等问题，旨在为企业提供在实施微服务时的参考和指导。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253477",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1681534,
    "commentCount": 428,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253477",
    "postTime": "2018-12-25 20:08:12",
    "diggCount": 20,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/f35615089a9135267e2e2886f1fbe211.png"
    ],
    "collectCount": 32,
    "tags": [
      "微服务",
      "架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253412,
    "title": "微服务架构构建的完整路径：四大系统方法总结",
    "description": "本文介绍了构建微服务架构的系统方法，重点从四个方面展开讨论：服务模型、实现技术、基础设施和研发过程。首先，通过服务建模方法和服务拆分与集成策略，阐述了如何设计微服务架构。接着，探讨了关键技术实现，包括服务通信、事件驱动、负载均衡、API网关等。基础设施方面，文章涵盖了测试、交付部署、监控与安全等重要内容。最后，本文讨论了微服务架构转型过程中的组织和文化调整，以及如何通过敏捷开发、DevOps等实践推动研发过程的优化。通过这些内容，本文为构建高效、可扩展的微服务架构提供了全面的指导与实用的建议。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253412",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1682407,
    "commentCount": 484,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253412",
    "postTime": "2018-12-25 20:02:38",
    "diggCount": 18,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/4809f12c144591830e51e094311c24af.png"
    ],
    "collectCount": 17,
    "tags": [
      "架构",
      "微服务",
      "云原生",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253353,
    "title": "分布式锁实现解析：几种简单方式的对比与选择",
    "description": "本文分析了几种常见的分布式锁实现方式，包括基于Redis、ZooKeeper和数据库的方案。通过对每种方式的原理、优缺点进行深入剖析，本文旨在帮助开发者根据不同的应用场景选择合适的分布式锁实现。同时，文章还讨论了分布式锁的使用建议和最佳实践，为解决分布式系统中的并发控制问题提供了有效的参考。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253353",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1695868,
    "commentCount": 1371,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253353",
    "postTime": "2018-12-25 19:59:21",
    "diggCount": 17,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/0e6dc1ecadf79bfabb276c6db3b31ab2.png"
    ],
    "collectCount": 40,
    "tags": [
      "架构",
      "微服务",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85253251,
    "title": "理解IOC与DI：Spring容器初始化与依赖注入解析",
    "description": "本文探讨了Spring框架中的**IOC（控制反转）和DI（依赖注入）**概念。通过IOC容器管理对象的创建与依赖关系，解耦组件间的联系，提高系统灵活性。DI作为IOC的实现方式，简化了依赖管理，降低了代码耦合度。文章还讲解了Spring容器的初始化过程及依赖注入的实现，帮助开发者更好地理解和应用这些核心特性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85253251",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 827786,
    "commentCount": 486,
    "editUrl": "https://mp.csdn.net/console/editor/html/85253251",
    "postTime": "2018-12-25 19:51:08",
    "diggCount": 22,
    "formatTime": "2018.12.25",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/14eef9183f7c493bade0ae2781947c97.png"
    ],
    "collectCount": 37,
    "tags": [
      "spring boot",
      "spring",
      "java",
      "后端"
    ]
  },
  {
    "articleId": 85169642,
    "title": "从业务需求到技术实现：动态工作流引擎的构建与应用",
    "description": "本文介绍了如何实现一个动态配置执行工作流引擎，重点讲解了工作流的设计与实现过程。通过分析工作流执行上下文、任务节点定义、执行器、调度平台等核心组件，展示了如何在不同的业务场景下灵活配置和动态执行工作流。文章还通过实际案例，阐述了智能化处理和数据流转的工作流任务，如新闻内容处理、AI赋能、数据同步等。最后，文章总结了动态配置执行工作流引擎的优势，并展望了未来优化和扩展的方向。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85169642",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1693393,
    "commentCount": 1120,
    "editUrl": "https://mp.csdn.net/console/editor/html/85169642",
    "postTime": "2018-12-21 19:16:24",
    "diggCount": 19,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/1894144fc7f61e95aedeff0cfeca90e4.png"
    ],
    "collectCount": 23,
    "tags": [
      "设计模式",
      "系统架构",
      "分布式",
      "后端"
    ]
  },
  {
    "articleId": 85163814,
    "title": "MySQL：表的约束+设置表的字段值自动增加",
    "description": "MySQL：表的约束+设置表的字段值自动增加",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85163814",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 838660,
    "commentCount": 523,
    "editUrl": "https://mp.csdn.net/console/editor/html/85163814",
    "postTime": "2018-12-21 16:09:19",
    "diggCount": 19,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/88897a620b3e43e4bd58b2f71c52c94d.png"
    ],
    "collectCount": 33,
    "tags": [
      "mysql",
      "数据库",
      "sql"
    ]
  },
  {
    "articleId": 85163793,
    "title": "MYSQL数据表基本操作：创建+查看+修改+删除",
    "description": "本文介绍了如何通过SQL命令创建、查看、修改和删除数据库表。内容涵盖了表的创建、结构查看、字段修改及表删除的常用语法，并强调了操作中的注意事项，以确保数据完整性和防止误操作。旨在帮助读者掌握数据库表管理的基础技能。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85163793",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 832578,
    "commentCount": 528,
    "editUrl": "https://mp.csdn.net/console/editor/html/85163793",
    "postTime": "2018-12-21 16:08:13",
    "diggCount": 27,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/fabfc9159f73462b82f3bd26c09c51ba.png"
    ],
    "collectCount": 67,
    "tags": [
      "mysql",
      "数据库",
      "sql"
    ]
  },
  {
    "articleId": 85162029,
    "title": "MYSQL数据库基本操作：创建、查看、修改、删除",
    "description": "本文介绍了MySQL数据库的基本管理操作，包括创建、查看、修改和删除数据库的常用命令及其注意事项。通过详细讲解数据库的字符集选择、修改数据库时的安全措施、删除数据库时的谨慎操作等，帮助读者掌握如何有效管理和维护数据库。此外，文章还强调了数据库的安全性、性能优化以及备份策略，旨在提高数据库操作的效率与安全性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/85162029",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 845765,
    "commentCount": 1019,
    "editUrl": "https://mp.csdn.net/console/editor/html/85162029",
    "postTime": "2018-12-21 14:49:37",
    "diggCount": 38,
    "formatTime": "2018.12.21",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/68dbc3b74ba74f378515d3b1b0260835.png"
    ],
    "collectCount": 200,
    "tags": [
      "MySQL",
      "数据库",
      "mysql",
      "oracle",
      "sql"
    ]
  },
  {
    "articleId": 84936252,
    "title": "Shell脚本实现日志老化管理：七天打包归档与三十天自动清除",
    "description": "本文介绍了一个用于日志管理和清理的自动化脚本 clearlogs.sh。该脚本能够扫描指定目录下的日志文件，自动处理超过七天未修改的文件，进行打包存档并移至备份目录。此外，它还能够定期清理超过30天的备份文件和临时文件，确保系统存储的高效利用。通过记录详细的日志和异常处理机制，脚本提高了日志管理的透明度和可操作性，特别适用于多容器环境下的日志统一管理。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/84936252",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1695415,
    "commentCount": 1121,
    "editUrl": "https://mp.csdn.net/console/editor/html/84936252",
    "postTime": "2018-12-10 10:40:56",
    "diggCount": 20,
    "formatTime": "2018.12.10",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/147fa3c1df892e673a7421b89bd4a2bf.png"
    ],
    "collectCount": 26,
    "tags": [
      "服务器",
      "linux",
      "运维",
      "后端"
    ]
  },
  {
    "articleId": 53034130,
    "title": "Java高频面试基础知识点整理",
    "description": "Java高频面试知识点总结：覆盖高频基础知识考点+高频集合知识点深入分析+高频多线程与并发编程面试题汇总+其他扩展考察等。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/53034130",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 1684753,
    "commentCount": 980,
    "editUrl": "https://mp.csdn.net/console/editor/html/53034130",
    "postTime": "2016-11-04 14:00:37",
    "diggCount": 35,
    "formatTime": "2016.11.04",
    "picList": [
      "https://i-blog.csdnimg.cn/blog_migrate/cover/a7dbb412c6bcbfc28f6e44606de60989.png"
    ],
    "collectCount": 162,
    "tags": [
      "java"
    ]
  },
  {
    "articleId": 145230528,
    "title": "2024年度推进可解释人工智能迈向类人智能讨论总结分享",
    "description": "本文探讨了可解释人工智能（XAI）的现状与未来发展，重点分析了AI透明化的必要性和多种解释方法的应用。同时，文章深入讨论了人工通用智能（AGI）和神经AI接口的发展前景，探讨了AI如何逐步具备情感、意识与自我觉察等人类特质，进而向更高层次的智能迈进。此外，文章还强调了伦理、社会责任与跨学科合作的重要性，指出技术进步应与社会价值相融合，推动AI服务于人类福祉。通过对技术与伦理挑战的全面分析，本文展望了一个更加智能且人性化的未来。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145230528",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 472,
    "commentCount": 0,
    "editUrl": "https://mp.csdn.net/console/editor/html/145230528",
    "postTime": "2025-01-18 19:43:41",
    "diggCount": 3,
    "formatTime": "2 小时前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/133f48d9d6b143f9bac6737631943660.png"
    ],
    "collectCount": 5,
    "tags": [
      "人工智能"
    ]
  },
  {
    "articleId": 145668734,
    "title": "Java GC 基础知识快速回顾",
    "description": "本篇文章深入探讨了 Java 垃圾回收（GC）机制的核心概念、工作原理及其对应用性能的影响。我们介绍了垃圾回收的基本概念，包括堆和栈的内存管理、GC 的触发机制、GC 对开发者的重要性等。文章重点分析了常见的垃圾回收算法和回收器，涵盖了分代收集和分区收集策略，以及如何根据应用需求选择合适的回收器。最后，我们还讨论了 GC 的性能调优方法，帮助开发者通过优化内存管理提升应用性能，避免内存泄漏和性能瓶颈。通过本文的学习，读者将能够更好地理解和优化 Java 应用中的垃圾回收机制，确保程序的高效稳定运行。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145668734",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 77,
    "commentCount": 0,
    "editUrl": "https://mp.csdn.net/console/editor/html/145668734",
    "postTime": "2025-02-16 22:03:59",
    "diggCount": 0,
    "formatTime": "5 分钟前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/3d7a6a07efd84262953327e16a972ace.png"
    ],
    "collectCount": 0,
    "tags": [
      "后端",
      "架构",
      "JVM基础"
    ]
  },
  {
    "articleId": 145671747,
    "title": "深入剖析GC问题：如何有效判断与排查",
    "description": "本文介绍了Java垃圾回收（GC）的基本原理及其优化策略。通过分析GC的工作机制，探讨了常见的GC类型、内存管理模型及其对应用性能的影响。文章还详细阐述了如何通过调整JVM参数、选择合适的GC算法和分析GC日志来优化内存回收效率。通过这些实用的优化方法，开发者可以有效减少GC暂停时间，提高应用的响应速度和吞吐量。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145671747",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 308,
    "commentCount": 0,
    "editUrl": "https://mp.csdn.net/console/editor/html/145671747",
    "postTime": "2025-02-17 00:00:29",
    "diggCount": 2,
    "formatTime": "12 分钟前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/c822fcd95c934e7a841c23977c73b917.png"
    ],
    "collectCount": 1,
    "tags": [
      "java",
      "算法",
      "JVM基础"
    ]
  },
  {
    "articleId": 145798261,
    "title": "动态扩缩容引发的JVM堆内存震荡：从原理到实践的GC调优指南",
    "description": "本文分析了 JVM 内存弹性机制及其在高负载环境中的挑战，重点探讨了堆内存伸缩、内存扩展与收缩的核心机制。通过对系统发布后 GC 雪崩事件的分析，文章揭示了多代际内存管理中的响应差异，尤其是年轻代、老年代与 Metaspace 的协调问题。为避免这些问题，提出了优化内存配置、调整 GC 策略和合理设置代际大小的解决方案。此外，文章进一步探讨了从被动响应到主动防御的转变，建议结合智能调节与自动化监控机制。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145798261",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 689,
    "commentCount": 3,
    "editUrl": "https://mp.csdn.net/console/editor/html/145798261",
    "postTime": "2025-03-03 08:57:04",
    "diggCount": 23,
    "formatTime": "13 小时前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/02822a4d26334af897bd63d45053f9be.png"
    ],
    "collectCount": 15,
    "tags": [
      "jvm",
      "ZYF JVM 知识准备分享",
      "CMS",
      "G1",
      "ZGC"
    ]
  },
  {
    "articleId": 145799683,
    "title": "显式 GC 的使用：留与去，如何选择？",
    "description": "显式垃圾回收（Explicit GC）是 Java 中通过开发者调用 System.gc() 手动触发的垃圾回收过程。与自动 GC 不同，显式 GC 允许开发者在内存压力较大时主动清理不再使用的对象。然而，显式 GC 可能导致应用性能下降，因为它会触发全堆回收，造成线程暂停（STW）现象，尤其在高负载情况下。尽管它能帮助清理堆外内存（如 DirectByteBuffer 中的内存），但频繁使用会干扰 JVM 的自动垃圾回收策略，从而影响系统性能。使用显式 GC 是否适合，取决于应用的性能需求和内存管理要求。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145799683",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 391,
    "commentCount": 1,
    "editUrl": "https://mp.csdn.net/console/editor/html/145799683",
    "postTime": "2025-03-03 08:56:31",
    "diggCount": 12,
    "formatTime": "13 小时前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/e368b002c2c04f17b07942cee10221e4.png"
    ],
    "collectCount": 10,
    "tags": [
      "jvm"
    ]
  },
  {
    "articleId": 145801635,
    "title": "如何选取合适的 NewRatio 值来优化 JVM 的垃圾回收策略",
    "description": "本文探讨了 NewRatio 在 JVM 垃圾回收中的作用及优化策略。通过调整 NewRatio 值，可以在不同负载下优化新生代与老年代的内存分配，减少垃圾回收停顿。在高负载环境中，减小 NewRatio 有助于减少 Full GC 的频率，而低负载下则通过增大 NewRatio 提高内存利用率。结合 CMS 收集器和堆内存调整，合理配置垃圾回收参数，能显著提升 JVM 性能，优化内存管理。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145801635",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 821,
    "commentCount": 2,
    "editUrl": "https://mp.csdn.net/console/editor/html/145801635",
    "postTime": "2025-03-10 08:35:27",
    "diggCount": 15,
    "formatTime": "14 小时前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/31d446f475b0448e96d594aa0478cc31.png"
    ],
    "collectCount": 11,
    "tags": [
      "jvm",
      "ZYF JVM 知识准备分享"
    ]
  },
  {
    "articleId": 145808157,
    "title": "分析CMS GC退化为单线程串行GC模式的原因与优化",
    "description": "本文分析了Java CMS（Concurrent Mark-Sweep）垃圾回收器在特定情况下退化为串行GC模式的现象，导致停顿时间显著增加，影响系统性能。文章详细探讨了退化的原因，包括老年代空间不足、并发标记失败、内存碎片化和应用程序中断等，并提出了相应的优化建议，如增加老年代空间、调整GC参数、定期触发Full GC和优化内存分配等。通过合理配置JVM和优化内存管理，可以有效降低CMS退化的风险，提升系统的吞吐量和响应速度，确保Java应用的稳定运行。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145808157",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 790,
    "commentCount": 0,
    "editUrl": "https://mp.csdn.net/console/editor/html/145808157",
    "postTime": "2025-03-10 08:34:57",
    "diggCount": 12,
    "formatTime": "14 小时前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/ec5e0924e5434260a624ce747d6058a9.png"
    ],
    "collectCount": 18,
    "tags": [
      "jvm",
      "ZYF JVM 知识储备分享"
    ]
  },
  {
    "articleId": 145799980,
    "title": "深入剖析 MetaSpace OOM 问题：根因分析与高效解决策略",
    "description": "MetaSpace区是JVM内存管理中的关键部分，负责存储类元数据。随着Java 8的推出，MetaSpace取代了PermGen区，但其灵活性也带来了新的挑战，尤其是在动态类加载和频繁类更新的场景下，容易导致MetaSpace内存溢出（OOM）问题。本文探讨了MetaSpace OOM的根本原因，包括类加载器泄漏、内存管理不当和GC效率低下等，并提供了一系列调优策略和解决方案，帮助开发者有效排查和防止此类问题的发生，确保应用程序的稳定性和高可用性。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145799980",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 0,
    "commentCount": 0,
    "editUrl": "https://mp.csdn.net/console/editor/html/145799980",
    "postTime": "2025-03-16 21:13:58",
    "diggCount": 0,
    "formatTime": "1 分钟前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/05889d28c4094faabc3c860d130c38ee.png"
    ],
    "collectCount": 0,
    "tags": [
      "jvm",
      "ZYF JVM 知识储备分享"
    ]
  },
  {
    "articleId": 145809647,
    "title": "如何高效解决 Java 内存泄漏问题方法论",
    "description": "本文介绍了高效诊断和优化 Java 内存泄漏问题的系统化方法。通过获取内存快照、使用 MAT 和 JProfiler 等工具分析对象，逐步排查泄漏源，确认问题并优化代码，开发者可以解决内存泄漏并提升应用性能。内容包括内存快照生成、内存差异对比、疑似泄漏检测、代码优化等，确保垃圾回收机制正常工作，最终提高应用的稳定性和效率。",
    "url": "https://zyfcodes.blog.csdn.net/article/details/145809647",
    "type": 1,
    "top": false,
    "forcePlan": false,
    "viewCount": 0,
    "commentCount": 0,
    "editUrl": "https://mp.csdn.net/console/editor/html/145809647",
    "postTime": "2025-03-16 21:13:31",
    "diggCount": 0,
    "formatTime": "2 分钟前",
    "picList": [
      "https://i-blog.csdnimg.cn/direct/67635821d1904411986c814a440d3391.png"
    ],
    "collectCount": 0,
    "tags": [
      "java",
      "jvm",
      "ZYF JVM 知识储备分享"
    ]
  }
]